/* 
 * Voicify Analytics API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace Voicify.Sdk.Core.Models.Model
{
    /// <summary>
    /// ApplicationUsageModel
    /// </summary>
    [DataContract]
    public partial class ApplicationUsageModel :  IEquatable<ApplicationUsageModel>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationUsageModel" /> class.
        /// </summary>
        /// <param name="applicationId">applicationId.</param>
        /// <param name="usageByAssistant">usageByAssistant.</param>
        /// <param name="usageByFeature">usageByFeature.</param>
        /// <param name="usageByDevice">usageByDevice.</param>
        public ApplicationUsageModel(string applicationId = default(string), List<AssistantUsageModel> usageByAssistant = default(List<AssistantUsageModel>), List<FeatureUsageModel> usageByFeature = default(List<FeatureUsageModel>), List<DeviceTargetUsageModel> usageByDevice = default(List<DeviceTargetUsageModel>))
        {
            this.ApplicationId = applicationId;
            this.UsageByAssistant = usageByAssistant;
            this.UsageByFeature = usageByFeature;
            this.UsageByDevice = usageByDevice;
        }
        
        /// <summary>
        /// Gets or Sets ApplicationId
        /// </summary>
        [DataMember(Name="applicationId", EmitDefaultValue=false)]
        public string ApplicationId { get; set; }

        /// <summary>
        /// Gets or Sets UsageByAssistant
        /// </summary>
        [DataMember(Name="usageByAssistant", EmitDefaultValue=false)]
        public List<AssistantUsageModel> UsageByAssistant { get; set; }

        /// <summary>
        /// Gets or Sets UsageByFeature
        /// </summary>
        [DataMember(Name="usageByFeature", EmitDefaultValue=false)]
        public List<FeatureUsageModel> UsageByFeature { get; set; }

        /// <summary>
        /// Gets or Sets UsageByDevice
        /// </summary>
        [DataMember(Name="usageByDevice", EmitDefaultValue=false)]
        public List<DeviceTargetUsageModel> UsageByDevice { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ApplicationUsageModel {\n");
            sb.Append("  ApplicationId: ").Append(ApplicationId).Append("\n");
            sb.Append("  UsageByAssistant: ").Append(UsageByAssistant).Append("\n");
            sb.Append("  UsageByFeature: ").Append(UsageByFeature).Append("\n");
            sb.Append("  UsageByDevice: ").Append(UsageByDevice).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ApplicationUsageModel);
        }

        /// <summary>
        /// Returns true if ApplicationUsageModel instances are equal
        /// </summary>
        /// <param name="input">Instance of ApplicationUsageModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApplicationUsageModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ApplicationId == input.ApplicationId ||
                    (this.ApplicationId != null &&
                    this.ApplicationId.Equals(input.ApplicationId))
                ) && 
                (
                    this.UsageByAssistant == input.UsageByAssistant ||
                    this.UsageByAssistant != null &&
                    this.UsageByAssistant.SequenceEqual(input.UsageByAssistant)
                ) && 
                (
                    this.UsageByFeature == input.UsageByFeature ||
                    this.UsageByFeature != null &&
                    this.UsageByFeature.SequenceEqual(input.UsageByFeature)
                ) && 
                (
                    this.UsageByDevice == input.UsageByDevice ||
                    this.UsageByDevice != null &&
                    this.UsageByDevice.SequenceEqual(input.UsageByDevice)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ApplicationId != null)
                    hashCode = hashCode * 59 + this.ApplicationId.GetHashCode();
                if (this.UsageByAssistant != null)
                    hashCode = hashCode * 59 + this.UsageByAssistant.GetHashCode();
                if (this.UsageByFeature != null)
                    hashCode = hashCode * 59 + this.UsageByFeature.GetHashCode();
                if (this.UsageByDevice != null)
                    hashCode = hashCode * 59 + this.UsageByDevice.GetHashCode();
                return hashCode;
            }
        }

    }

}

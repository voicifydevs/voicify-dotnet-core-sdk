/* 
 * Voicify Analytics API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace Voicify.Sdk.Core.Models.Model
{
    /// <summary>
    /// ConversationTrackingTreeStartNode
    /// </summary>
    [DataContract]
    public partial class ConversationTrackingTreeStartNode :  IEquatable<ConversationTrackingTreeStartNode>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConversationTrackingTreeStartNode" /> class.
        /// </summary>
        /// <param name="parentNode">parentNode.</param>
        /// <param name="requestIds">requestIds.</param>
        /// <param name="sessionIds">sessionIds.</param>
        /// <param name="userIds">userIds.</param>
        /// <param name="childNodes">childNodes.</param>
        public ConversationTrackingTreeStartNode(ConversationTrackingTreeBaseNode parentNode = default(ConversationTrackingTreeBaseNode), List<string> requestIds = default(List<string>), List<string> sessionIds = default(List<string>), List<string> userIds = default(List<string>), List<ConversationTrackingTreeBaseNode> childNodes = default(List<ConversationTrackingTreeBaseNode>))
        {
            this.ParentNode = parentNode;
            this.RequestIds = requestIds;
            this.SessionIds = sessionIds;
            this.UserIds = userIds;
            this.ChildNodes = childNodes;
        }
        
        /// <summary>
        /// Gets or Sets ConversationTrackingNodeType
        /// </summary>
        [DataMember(Name="conversationTrackingNodeType", EmitDefaultValue=false)]
        public string ConversationTrackingNodeType { get; private set; }

        /// <summary>
        /// Gets or Sets ParentNode
        /// </summary>
        [DataMember(Name="parentNode", EmitDefaultValue=false)]
        public ConversationTrackingTreeBaseNode ParentNode { get; set; }

        /// <summary>
        /// Gets or Sets RequestIds
        /// </summary>
        [DataMember(Name="requestIds", EmitDefaultValue=false)]
        public List<string> RequestIds { get; set; }

        /// <summary>
        /// Gets or Sets SessionIds
        /// </summary>
        [DataMember(Name="sessionIds", EmitDefaultValue=false)]
        public List<string> SessionIds { get; set; }

        /// <summary>
        /// Gets or Sets UserIds
        /// </summary>
        [DataMember(Name="userIds", EmitDefaultValue=false)]
        public List<string> UserIds { get; set; }

        /// <summary>
        /// Gets or Sets ChildNodes
        /// </summary>
        [DataMember(Name="childNodes", EmitDefaultValue=false)]
        public List<ConversationTrackingTreeBaseNode> ChildNodes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConversationTrackingTreeStartNode {\n");
            sb.Append("  ConversationTrackingNodeType: ").Append(ConversationTrackingNodeType).Append("\n");
            sb.Append("  ParentNode: ").Append(ParentNode).Append("\n");
            sb.Append("  RequestIds: ").Append(RequestIds).Append("\n");
            sb.Append("  SessionIds: ").Append(SessionIds).Append("\n");
            sb.Append("  UserIds: ").Append(UserIds).Append("\n");
            sb.Append("  ChildNodes: ").Append(ChildNodes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConversationTrackingTreeStartNode);
        }

        /// <summary>
        /// Returns true if ConversationTrackingTreeStartNode instances are equal
        /// </summary>
        /// <param name="input">Instance of ConversationTrackingTreeStartNode to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConversationTrackingTreeStartNode input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ConversationTrackingNodeType == input.ConversationTrackingNodeType ||
                    (this.ConversationTrackingNodeType != null &&
                    this.ConversationTrackingNodeType.Equals(input.ConversationTrackingNodeType))
                ) && 
                (
                    this.ParentNode == input.ParentNode ||
                    (this.ParentNode != null &&
                    this.ParentNode.Equals(input.ParentNode))
                ) && 
                (
                    this.RequestIds == input.RequestIds ||
                    this.RequestIds != null &&
                    this.RequestIds.SequenceEqual(input.RequestIds)
                ) && 
                (
                    this.SessionIds == input.SessionIds ||
                    this.SessionIds != null &&
                    this.SessionIds.SequenceEqual(input.SessionIds)
                ) && 
                (
                    this.UserIds == input.UserIds ||
                    this.UserIds != null &&
                    this.UserIds.SequenceEqual(input.UserIds)
                ) && 
                (
                    this.ChildNodes == input.ChildNodes ||
                    this.ChildNodes != null &&
                    this.ChildNodes.SequenceEqual(input.ChildNodes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ConversationTrackingNodeType != null)
                    hashCode = hashCode * 59 + this.ConversationTrackingNodeType.GetHashCode();
                if (this.ParentNode != null)
                    hashCode = hashCode * 59 + this.ParentNode.GetHashCode();
                if (this.RequestIds != null)
                    hashCode = hashCode * 59 + this.RequestIds.GetHashCode();
                if (this.SessionIds != null)
                    hashCode = hashCode * 59 + this.SessionIds.GetHashCode();
                if (this.UserIds != null)
                    hashCode = hashCode * 59 + this.UserIds.GetHashCode();
                if (this.ChildNodes != null)
                    hashCode = hashCode * 59 + this.ChildNodes.GetHashCode();
                return hashCode;
            }
        }

    }

}

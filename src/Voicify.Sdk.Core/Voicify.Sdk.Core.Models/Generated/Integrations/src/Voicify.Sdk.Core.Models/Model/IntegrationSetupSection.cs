/* 
 * Voicify Integrations API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace Voicify.Sdk.Core.Models.Model
{
    /// <summary>
    /// IntegrationSetupSection
    /// </summary>
    [DataContract]
    public partial class IntegrationSetupSection :  IEquatable<IntegrationSetupSection>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IntegrationSetupSection" /> class.
        /// </summary>
        /// <param name="instructionsMarkdown">instructionsMarkdown.</param>
        /// <param name="properties">properties.</param>
        public IntegrationSetupSection(string instructionsMarkdown = default(string), List<IntegrationSetupProperty> properties = default(List<IntegrationSetupProperty>))
        {
            this.InstructionsMarkdown = instructionsMarkdown;
            this.Properties = properties;
        }
        
        /// <summary>
        /// Gets or Sets InstructionsMarkdown
        /// </summary>
        [DataMember(Name="instructionsMarkdown", EmitDefaultValue=false)]
        public string InstructionsMarkdown { get; set; }

        /// <summary>
        /// Gets or Sets Properties
        /// </summary>
        [DataMember(Name="properties", EmitDefaultValue=false)]
        public List<IntegrationSetupProperty> Properties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IntegrationSetupSection {\n");
            sb.Append("  InstructionsMarkdown: ").Append(InstructionsMarkdown).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IntegrationSetupSection);
        }

        /// <summary>
        /// Returns true if IntegrationSetupSection instances are equal
        /// </summary>
        /// <param name="input">Instance of IntegrationSetupSection to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IntegrationSetupSection input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.InstructionsMarkdown == input.InstructionsMarkdown ||
                    (this.InstructionsMarkdown != null &&
                    this.InstructionsMarkdown.Equals(input.InstructionsMarkdown))
                ) && 
                (
                    this.Properties == input.Properties ||
                    this.Properties != null &&
                    this.Properties.SequenceEqual(input.Properties)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InstructionsMarkdown != null)
                    hashCode = hashCode * 59 + this.InstructionsMarkdown.GetHashCode();
                if (this.Properties != null)
                    hashCode = hashCode * 59 + this.Properties.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

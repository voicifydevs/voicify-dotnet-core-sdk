/* 
 * Voicify Integrations API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace Voicify.Sdk.Core.Models.Model
{
    /// <summary>
    /// AccountLinkingConfigurationResponse
    /// </summary>
    [DataContract]
    public partial class AccountLinkingConfigurationResponse :  IEquatable<AccountLinkingConfigurationResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountLinkingConfigurationResponse" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="authorizationUri">authorizationUri.</param>
        /// <param name="accessTokenUri">accessTokenUri.</param>
        /// <param name="accountLinkingType">accountLinkingType.</param>
        /// <param name="clientId">clientId.</param>
        /// <param name="clientSecret">clientSecret.</param>
        /// <param name="scopes">scopes.</param>
        /// <param name="domains">domains.</param>
        /// <param name="accessTokenScheme">accessTokenScheme.</param>
        /// <param name="applicationId">applicationId.</param>
        public AccountLinkingConfigurationResponse(string id = default(string), string authorizationUri = default(string), string accessTokenUri = default(string), string accountLinkingType = default(string), string clientId = default(string), string clientSecret = default(string), string scopes = default(string), string domains = default(string), string accessTokenScheme = default(string), string applicationId = default(string))
        {
            this.Id = id;
            this.AuthorizationUri = authorizationUri;
            this.AccessTokenUri = accessTokenUri;
            this.AccountLinkingType = accountLinkingType;
            this.ClientId = clientId;
            this.ClientSecret = clientSecret;
            this.Scopes = scopes;
            this.Domains = domains;
            this.AccessTokenScheme = accessTokenScheme;
            this.ApplicationId = applicationId;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets AuthorizationUri
        /// </summary>
        [DataMember(Name="authorizationUri", EmitDefaultValue=false)]
        public string AuthorizationUri { get; set; }

        /// <summary>
        /// Gets or Sets AccessTokenUri
        /// </summary>
        [DataMember(Name="accessTokenUri", EmitDefaultValue=false)]
        public string AccessTokenUri { get; set; }

        /// <summary>
        /// Gets or Sets AccountLinkingType
        /// </summary>
        [DataMember(Name="accountLinkingType", EmitDefaultValue=false)]
        public string AccountLinkingType { get; set; }

        /// <summary>
        /// Gets or Sets ClientId
        /// </summary>
        [DataMember(Name="clientId", EmitDefaultValue=false)]
        public string ClientId { get; set; }

        /// <summary>
        /// Gets or Sets ClientSecret
        /// </summary>
        [DataMember(Name="clientSecret", EmitDefaultValue=false)]
        public string ClientSecret { get; set; }

        /// <summary>
        /// Gets or Sets Scopes
        /// </summary>
        [DataMember(Name="scopes", EmitDefaultValue=false)]
        public string Scopes { get; set; }

        /// <summary>
        /// Gets or Sets Domains
        /// </summary>
        [DataMember(Name="domains", EmitDefaultValue=false)]
        public string Domains { get; set; }

        /// <summary>
        /// Gets or Sets AccessTokenScheme
        /// </summary>
        [DataMember(Name="accessTokenScheme", EmitDefaultValue=false)]
        public string AccessTokenScheme { get; set; }

        /// <summary>
        /// Gets or Sets ApplicationId
        /// </summary>
        [DataMember(Name="applicationId", EmitDefaultValue=false)]
        public string ApplicationId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccountLinkingConfigurationResponse {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AuthorizationUri: ").Append(AuthorizationUri).Append("\n");
            sb.Append("  AccessTokenUri: ").Append(AccessTokenUri).Append("\n");
            sb.Append("  AccountLinkingType: ").Append(AccountLinkingType).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  ClientSecret: ").Append(ClientSecret).Append("\n");
            sb.Append("  Scopes: ").Append(Scopes).Append("\n");
            sb.Append("  Domains: ").Append(Domains).Append("\n");
            sb.Append("  AccessTokenScheme: ").Append(AccessTokenScheme).Append("\n");
            sb.Append("  ApplicationId: ").Append(ApplicationId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccountLinkingConfigurationResponse);
        }

        /// <summary>
        /// Returns true if AccountLinkingConfigurationResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of AccountLinkingConfigurationResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountLinkingConfigurationResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.AuthorizationUri == input.AuthorizationUri ||
                    (this.AuthorizationUri != null &&
                    this.AuthorizationUri.Equals(input.AuthorizationUri))
                ) && 
                (
                    this.AccessTokenUri == input.AccessTokenUri ||
                    (this.AccessTokenUri != null &&
                    this.AccessTokenUri.Equals(input.AccessTokenUri))
                ) && 
                (
                    this.AccountLinkingType == input.AccountLinkingType ||
                    (this.AccountLinkingType != null &&
                    this.AccountLinkingType.Equals(input.AccountLinkingType))
                ) && 
                (
                    this.ClientId == input.ClientId ||
                    (this.ClientId != null &&
                    this.ClientId.Equals(input.ClientId))
                ) && 
                (
                    this.ClientSecret == input.ClientSecret ||
                    (this.ClientSecret != null &&
                    this.ClientSecret.Equals(input.ClientSecret))
                ) && 
                (
                    this.Scopes == input.Scopes ||
                    (this.Scopes != null &&
                    this.Scopes.Equals(input.Scopes))
                ) && 
                (
                    this.Domains == input.Domains ||
                    (this.Domains != null &&
                    this.Domains.Equals(input.Domains))
                ) && 
                (
                    this.AccessTokenScheme == input.AccessTokenScheme ||
                    (this.AccessTokenScheme != null &&
                    this.AccessTokenScheme.Equals(input.AccessTokenScheme))
                ) && 
                (
                    this.ApplicationId == input.ApplicationId ||
                    (this.ApplicationId != null &&
                    this.ApplicationId.Equals(input.ApplicationId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.AuthorizationUri != null)
                    hashCode = hashCode * 59 + this.AuthorizationUri.GetHashCode();
                if (this.AccessTokenUri != null)
                    hashCode = hashCode * 59 + this.AccessTokenUri.GetHashCode();
                if (this.AccountLinkingType != null)
                    hashCode = hashCode * 59 + this.AccountLinkingType.GetHashCode();
                if (this.ClientId != null)
                    hashCode = hashCode * 59 + this.ClientId.GetHashCode();
                if (this.ClientSecret != null)
                    hashCode = hashCode * 59 + this.ClientSecret.GetHashCode();
                if (this.Scopes != null)
                    hashCode = hashCode * 59 + this.Scopes.GetHashCode();
                if (this.Domains != null)
                    hashCode = hashCode * 59 + this.Domains.GetHashCode();
                if (this.AccessTokenScheme != null)
                    hashCode = hashCode * 59 + this.AccessTokenScheme.GetHashCode();
                if (this.ApplicationId != null)
                    hashCode = hashCode * 59 + this.ApplicationId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

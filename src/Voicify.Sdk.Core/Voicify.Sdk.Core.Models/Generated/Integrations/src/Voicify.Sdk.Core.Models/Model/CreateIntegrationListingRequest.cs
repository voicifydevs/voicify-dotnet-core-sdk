/* 
 * Voicify Integrations API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace Voicify.Sdk.Core.Models.Model
{
    /// <summary>
    /// CreateIntegrationListingRequest
    /// </summary>
    [DataContract]
    public partial class CreateIntegrationListingRequest :  IEquatable<CreateIntegrationListingRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateIntegrationListingRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateIntegrationListingRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateIntegrationListingRequest" /> class.
        /// </summary>
        /// <param name="provider">provider (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="description">description (required).</param>
        /// <param name="setupUrl">setupUrl (required).</param>
        /// <param name="configUrl">configUrl (required).</param>
        /// <param name="iconUrl">iconUrl.</param>
        public CreateIntegrationListingRequest(string provider = default(string), string name = default(string), string description = default(string), string setupUrl = default(string), string configUrl = default(string), string iconUrl = default(string))
        {
            // to ensure "provider" is required (not null)
            if (provider == null)
            {
                throw new InvalidDataException("provider is a required property for CreateIntegrationListingRequest and cannot be null");
            }
            else
            {
                this.Provider = provider;
            }
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for CreateIntegrationListingRequest and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new InvalidDataException("description is a required property for CreateIntegrationListingRequest and cannot be null");
            }
            else
            {
                this.Description = description;
            }
            // to ensure "setupUrl" is required (not null)
            if (setupUrl == null)
            {
                throw new InvalidDataException("setupUrl is a required property for CreateIntegrationListingRequest and cannot be null");
            }
            else
            {
                this.SetupUrl = setupUrl;
            }
            // to ensure "configUrl" is required (not null)
            if (configUrl == null)
            {
                throw new InvalidDataException("configUrl is a required property for CreateIntegrationListingRequest and cannot be null");
            }
            else
            {
                this.ConfigUrl = configUrl;
            }
            this.IconUrl = iconUrl;
        }
        
        /// <summary>
        /// Gets or Sets Provider
        /// </summary>
        [DataMember(Name="provider", EmitDefaultValue=false)]
        public string Provider { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets SetupUrl
        /// </summary>
        [DataMember(Name="setupUrl", EmitDefaultValue=false)]
        public string SetupUrl { get; set; }

        /// <summary>
        /// Gets or Sets ConfigUrl
        /// </summary>
        [DataMember(Name="configUrl", EmitDefaultValue=false)]
        public string ConfigUrl { get; set; }

        /// <summary>
        /// Gets or Sets IconUrl
        /// </summary>
        [DataMember(Name="iconUrl", EmitDefaultValue=false)]
        public string IconUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateIntegrationListingRequest {\n");
            sb.Append("  Provider: ").Append(Provider).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  SetupUrl: ").Append(SetupUrl).Append("\n");
            sb.Append("  ConfigUrl: ").Append(ConfigUrl).Append("\n");
            sb.Append("  IconUrl: ").Append(IconUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateIntegrationListingRequest);
        }

        /// <summary>
        /// Returns true if CreateIntegrationListingRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateIntegrationListingRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateIntegrationListingRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Provider == input.Provider ||
                    (this.Provider != null &&
                    this.Provider.Equals(input.Provider))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.SetupUrl == input.SetupUrl ||
                    (this.SetupUrl != null &&
                    this.SetupUrl.Equals(input.SetupUrl))
                ) && 
                (
                    this.ConfigUrl == input.ConfigUrl ||
                    (this.ConfigUrl != null &&
                    this.ConfigUrl.Equals(input.ConfigUrl))
                ) && 
                (
                    this.IconUrl == input.IconUrl ||
                    (this.IconUrl != null &&
                    this.IconUrl.Equals(input.IconUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Provider != null)
                    hashCode = hashCode * 59 + this.Provider.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.SetupUrl != null)
                    hashCode = hashCode * 59 + this.SetupUrl.GetHashCode();
                if (this.ConfigUrl != null)
                    hashCode = hashCode * 59 + this.ConfigUrl.GetHashCode();
                if (this.IconUrl != null)
                    hashCode = hashCode * 59 + this.IconUrl.GetHashCode();
                return hashCode;
            }
        }

    }

}

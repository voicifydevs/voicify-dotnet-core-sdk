/* 
 * Voicify Integrations API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using Voicify.Sdk.Core.Models.Integrations.Setup;

namespace Voicify.Sdk.Core.Models.Model
{
    /// <summary>
    /// IntegrationSetupProperty
    /// </summary>
    [DataContract]
    public partial class IntegrationSetupProperty :  IEquatable<IntegrationSetupProperty>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IntegrationSetupProperty" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected IntegrationSetupProperty() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="IntegrationSetupProperty" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="required">required (required).</param>
        /// <param name="label">label (required).</param>
        /// <param name="tooltip">tooltip.</param>
        /// <param name="field">field (required).</param>
        public IntegrationSetupProperty(string id = default(string), bool? required = default(bool?), string label = default(string), string tooltip = default(string), IIntegrationSetupField field = default)
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for IntegrationSetupProperty and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "required" is required (not null)
            if (required == null)
            {
                throw new InvalidDataException("required is a required property for IntegrationSetupProperty and cannot be null");
            }
            else
            {
                this.Required = required;
            }
            // to ensure "label" is required (not null)
            if (label == null)
            {
                throw new InvalidDataException("label is a required property for IntegrationSetupProperty and cannot be null");
            }
            else
            {
                this.Label = label;
            }
            // to ensure "field" is required (not null)
            if (field == null)
            {
                throw new InvalidDataException("field is a required property for IntegrationSetupProperty and cannot be null");
            }
            else
            {
                this.Field = field;
            }
            this.Tooltip = tooltip;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Required
        /// </summary>
        [DataMember(Name="required", EmitDefaultValue=false)]
        public bool? Required { get; set; }

        /// <summary>
        /// Gets or Sets Label
        /// </summary>
        [DataMember(Name="label", EmitDefaultValue=false)]
        public string Label { get; set; }

        /// <summary>
        /// Gets or Sets Tooltip
        /// </summary>
        [DataMember(Name="tooltip", EmitDefaultValue=false)]
        public string Tooltip { get; set; }

        /// <summary>
        /// Gets or Sets Field
        /// </summary>
        [DataMember(Name="field", EmitDefaultValue=false)]
        public IIntegrationSetupField Field { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IntegrationSetupProperty {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Required: ").Append(Required).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  Tooltip: ").Append(Tooltip).Append("\n");
            sb.Append("  Field: ").Append(Field).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IntegrationSetupProperty);
        }

        /// <summary>
        /// Returns true if IntegrationSetupProperty instances are equal
        /// </summary>
        /// <param name="input">Instance of IntegrationSetupProperty to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IntegrationSetupProperty input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Required == input.Required ||
                    (this.Required != null &&
                    this.Required.Equals(input.Required))
                ) && 
                (
                    this.Label == input.Label ||
                    (this.Label != null &&
                    this.Label.Equals(input.Label))
                ) && 
                (
                    this.Tooltip == input.Tooltip ||
                    (this.Tooltip != null &&
                    this.Tooltip.Equals(input.Tooltip))
                ) && 
                (
                    this.Field == input.Field ||
                    (this.Field != null &&
                    this.Field.Equals(input.Field))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Required != null)
                    hashCode = hashCode * 59 + this.Required.GetHashCode();
                if (this.Label != null)
                    hashCode = hashCode * 59 + this.Label.GetHashCode();
                if (this.Tooltip != null)
                    hashCode = hashCode * 59 + this.Tooltip.GetHashCode();
                if (this.Field != null)
                    hashCode = hashCode * 59 + this.Field.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

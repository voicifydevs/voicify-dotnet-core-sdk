/* 
 * Voicify Assistant API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace Voicify.Sdk.Core.Models.Model
{
    /// <summary>
    /// ViewportExperience
    /// </summary>
    [DataContract]
    public partial class ViewportExperience :  IEquatable<ViewportExperience>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ViewportExperience" /> class.
        /// </summary>
        /// <param name="canResize">canResize.</param>
        /// <param name="canRotate">canRotate.</param>
        /// <param name="arcMinuteWidth">arcMinuteWidth.</param>
        /// <param name="arcMinuteHeight">arcMinuteHeight.</param>
        public ViewportExperience(bool? canResize = default(bool?), bool? canRotate = default(bool?), int? arcMinuteWidth = default(int?), int? arcMinuteHeight = default(int?))
        {
            this.CanResize = canResize;
            this.CanRotate = canRotate;
            this.ArcMinuteWidth = arcMinuteWidth;
            this.ArcMinuteHeight = arcMinuteHeight;
        }
        
        /// <summary>
        /// Gets or Sets CanResize
        /// </summary>
        [DataMember(Name="canResize", EmitDefaultValue=false)]
        public bool? CanResize { get; set; }

        /// <summary>
        /// Gets or Sets CanRotate
        /// </summary>
        [DataMember(Name="canRotate", EmitDefaultValue=false)]
        public bool? CanRotate { get; set; }

        /// <summary>
        /// Gets or Sets ArcMinuteWidth
        /// </summary>
        [DataMember(Name="arcMinuteWidth", EmitDefaultValue=false)]
        public int? ArcMinuteWidth { get; set; }

        /// <summary>
        /// Gets or Sets ArcMinuteHeight
        /// </summary>
        [DataMember(Name="arcMinuteHeight", EmitDefaultValue=false)]
        public int? ArcMinuteHeight { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ViewportExperience {\n");
            sb.Append("  CanResize: ").Append(CanResize).Append("\n");
            sb.Append("  CanRotate: ").Append(CanRotate).Append("\n");
            sb.Append("  ArcMinuteWidth: ").Append(ArcMinuteWidth).Append("\n");
            sb.Append("  ArcMinuteHeight: ").Append(ArcMinuteHeight).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ViewportExperience);
        }

        /// <summary>
        /// Returns true if ViewportExperience instances are equal
        /// </summary>
        /// <param name="input">Instance of ViewportExperience to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ViewportExperience input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CanResize == input.CanResize ||
                    (this.CanResize != null &&
                    this.CanResize.Equals(input.CanResize))
                ) && 
                (
                    this.CanRotate == input.CanRotate ||
                    (this.CanRotate != null &&
                    this.CanRotate.Equals(input.CanRotate))
                ) && 
                (
                    this.ArcMinuteWidth == input.ArcMinuteWidth ||
                    (this.ArcMinuteWidth != null &&
                    this.ArcMinuteWidth.Equals(input.ArcMinuteWidth))
                ) && 
                (
                    this.ArcMinuteHeight == input.ArcMinuteHeight ||
                    (this.ArcMinuteHeight != null &&
                    this.ArcMinuteHeight.Equals(input.ArcMinuteHeight))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CanResize != null)
                    hashCode = hashCode * 59 + this.CanResize.GetHashCode();
                if (this.CanRotate != null)
                    hashCode = hashCode * 59 + this.CanRotate.GetHashCode();
                if (this.ArcMinuteWidth != null)
                    hashCode = hashCode * 59 + this.ArcMinuteWidth.GetHashCode();
                if (this.ArcMinuteHeight != null)
                    hashCode = hashCode * 59 + this.ArcMinuteHeight.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

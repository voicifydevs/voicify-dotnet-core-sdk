/* 
 * Voicify Assistant API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace Voicify.Sdk.Core.Models.Model
{
    /// <summary>
    /// VivContext
    /// </summary>
    [DataContract]
    public partial class VivContext :  IEquatable<VivContext>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VivContext" /> class.
        /// </summary>
        /// <param name="clientAppVersion">clientAppVersion.</param>
        /// <param name="is24HourFormat">is24HourFormat.</param>
        /// <param name="timezone">timezone.</param>
        /// <param name="handsFree">handsFree.</param>
        /// <param name="screenLocked">screenLocked.</param>
        /// <param name="sessionId">sessionId.</param>
        /// <param name="locale">locale.</param>
        /// <param name="grantedPermissions">grantedPermissions.</param>
        /// <param name="clientAppId">clientAppId.</param>
        /// <param name="device">device.</param>
        /// <param name="userId">userId.</param>
        /// <param name="canTypeId">canTypeId.</param>
        /// <param name="bixbyUserId">bixbyUserId.</param>
        public VivContext(string clientAppVersion = default(string), bool? is24HourFormat = default(bool?), string timezone = default(string), bool? handsFree = default(bool?), bool? screenLocked = default(bool?), string sessionId = default(string), string locale = default(string), Object grantedPermissions = default(Object), string clientAppId = default(string), string device = default(string), string userId = default(string), string canTypeId = default(string), string bixbyUserId = default(string))
        {
            this.ClientAppVersion = clientAppVersion;
            this.Is24HourFormat = is24HourFormat;
            this.Timezone = timezone;
            this.HandsFree = handsFree;
            this.ScreenLocked = screenLocked;
            this.SessionId = sessionId;
            this.Locale = locale;
            this.GrantedPermissions = grantedPermissions;
            this.ClientAppId = clientAppId;
            this.Device = device;
            this.UserId = userId;
            this.CanTypeId = canTypeId;
            this.BixbyUserId = bixbyUserId;
        }
        
        /// <summary>
        /// Gets or Sets ClientAppVersion
        /// </summary>
        [DataMember(Name="clientAppVersion", EmitDefaultValue=false)]
        public string ClientAppVersion { get; set; }

        /// <summary>
        /// Gets or Sets Is24HourFormat
        /// </summary>
        [DataMember(Name="is24HourFormat", EmitDefaultValue=false)]
        public bool? Is24HourFormat { get; set; }

        /// <summary>
        /// Gets or Sets Timezone
        /// </summary>
        [DataMember(Name="timezone", EmitDefaultValue=false)]
        public string Timezone { get; set; }

        /// <summary>
        /// Gets or Sets HandsFree
        /// </summary>
        [DataMember(Name="handsFree", EmitDefaultValue=false)]
        public bool? HandsFree { get; set; }

        /// <summary>
        /// Gets or Sets ScreenLocked
        /// </summary>
        [DataMember(Name="screenLocked", EmitDefaultValue=false)]
        public bool? ScreenLocked { get; set; }

        /// <summary>
        /// Gets or Sets SessionId
        /// </summary>
        [DataMember(Name="sessionId", EmitDefaultValue=false)]
        public string SessionId { get; set; }

        /// <summary>
        /// Gets or Sets Locale
        /// </summary>
        [DataMember(Name="locale", EmitDefaultValue=false)]
        public string Locale { get; set; }

        /// <summary>
        /// Gets or Sets GrantedPermissions
        /// </summary>
        [DataMember(Name="grantedPermissions", EmitDefaultValue=false)]
        public Object GrantedPermissions { get; set; }

        /// <summary>
        /// Gets or Sets ClientAppId
        /// </summary>
        [DataMember(Name="clientAppId", EmitDefaultValue=false)]
        public string ClientAppId { get; set; }

        /// <summary>
        /// Gets or Sets Device
        /// </summary>
        [DataMember(Name="device", EmitDefaultValue=false)]
        public string Device { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name="userId", EmitDefaultValue=false)]
        public string UserId { get; set; }

        /// <summary>
        /// Gets or Sets CanTypeId
        /// </summary>
        [DataMember(Name="canTypeId", EmitDefaultValue=false)]
        public string CanTypeId { get; set; }

        /// <summary>
        /// Gets or Sets BixbyUserId
        /// </summary>
        [DataMember(Name="bixbyUserId", EmitDefaultValue=false)]
        public string BixbyUserId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VivContext {\n");
            sb.Append("  ClientAppVersion: ").Append(ClientAppVersion).Append("\n");
            sb.Append("  Is24HourFormat: ").Append(Is24HourFormat).Append("\n");
            sb.Append("  Timezone: ").Append(Timezone).Append("\n");
            sb.Append("  HandsFree: ").Append(HandsFree).Append("\n");
            sb.Append("  ScreenLocked: ").Append(ScreenLocked).Append("\n");
            sb.Append("  SessionId: ").Append(SessionId).Append("\n");
            sb.Append("  Locale: ").Append(Locale).Append("\n");
            sb.Append("  GrantedPermissions: ").Append(GrantedPermissions).Append("\n");
            sb.Append("  ClientAppId: ").Append(ClientAppId).Append("\n");
            sb.Append("  Device: ").Append(Device).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  CanTypeId: ").Append(CanTypeId).Append("\n");
            sb.Append("  BixbyUserId: ").Append(BixbyUserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VivContext);
        }

        /// <summary>
        /// Returns true if VivContext instances are equal
        /// </summary>
        /// <param name="input">Instance of VivContext to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VivContext input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ClientAppVersion == input.ClientAppVersion ||
                    (this.ClientAppVersion != null &&
                    this.ClientAppVersion.Equals(input.ClientAppVersion))
                ) && 
                (
                    this.Is24HourFormat == input.Is24HourFormat ||
                    (this.Is24HourFormat != null &&
                    this.Is24HourFormat.Equals(input.Is24HourFormat))
                ) && 
                (
                    this.Timezone == input.Timezone ||
                    (this.Timezone != null &&
                    this.Timezone.Equals(input.Timezone))
                ) && 
                (
                    this.HandsFree == input.HandsFree ||
                    (this.HandsFree != null &&
                    this.HandsFree.Equals(input.HandsFree))
                ) && 
                (
                    this.ScreenLocked == input.ScreenLocked ||
                    (this.ScreenLocked != null &&
                    this.ScreenLocked.Equals(input.ScreenLocked))
                ) && 
                (
                    this.SessionId == input.SessionId ||
                    (this.SessionId != null &&
                    this.SessionId.Equals(input.SessionId))
                ) && 
                (
                    this.Locale == input.Locale ||
                    (this.Locale != null &&
                    this.Locale.Equals(input.Locale))
                ) && 
                (
                    this.GrantedPermissions == input.GrantedPermissions ||
                    (this.GrantedPermissions != null &&
                    this.GrantedPermissions.Equals(input.GrantedPermissions))
                ) && 
                (
                    this.ClientAppId == input.ClientAppId ||
                    (this.ClientAppId != null &&
                    this.ClientAppId.Equals(input.ClientAppId))
                ) && 
                (
                    this.Device == input.Device ||
                    (this.Device != null &&
                    this.Device.Equals(input.Device))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.CanTypeId == input.CanTypeId ||
                    (this.CanTypeId != null &&
                    this.CanTypeId.Equals(input.CanTypeId))
                ) && 
                (
                    this.BixbyUserId == input.BixbyUserId ||
                    (this.BixbyUserId != null &&
                    this.BixbyUserId.Equals(input.BixbyUserId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ClientAppVersion != null)
                    hashCode = hashCode * 59 + this.ClientAppVersion.GetHashCode();
                if (this.Is24HourFormat != null)
                    hashCode = hashCode * 59 + this.Is24HourFormat.GetHashCode();
                if (this.Timezone != null)
                    hashCode = hashCode * 59 + this.Timezone.GetHashCode();
                if (this.HandsFree != null)
                    hashCode = hashCode * 59 + this.HandsFree.GetHashCode();
                if (this.ScreenLocked != null)
                    hashCode = hashCode * 59 + this.ScreenLocked.GetHashCode();
                if (this.SessionId != null)
                    hashCode = hashCode * 59 + this.SessionId.GetHashCode();
                if (this.Locale != null)
                    hashCode = hashCode * 59 + this.Locale.GetHashCode();
                if (this.GrantedPermissions != null)
                    hashCode = hashCode * 59 + this.GrantedPermissions.GetHashCode();
                if (this.ClientAppId != null)
                    hashCode = hashCode * 59 + this.ClientAppId.GetHashCode();
                if (this.Device != null)
                    hashCode = hashCode * 59 + this.Device.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.CanTypeId != null)
                    hashCode = hashCode * 59 + this.CanTypeId.GetHashCode();
                if (this.BixbyUserId != null)
                    hashCode = hashCode * 59 + this.BixbyUserId.GetHashCode();
                return hashCode;
            }
        }

    }

}

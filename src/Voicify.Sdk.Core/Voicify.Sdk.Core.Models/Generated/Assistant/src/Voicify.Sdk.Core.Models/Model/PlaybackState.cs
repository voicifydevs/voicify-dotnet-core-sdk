/* 
 * Voicify Assistant API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace Voicify.Sdk.Core.Models.Model
{
    /// <summary>
    /// PlaybackState
    /// </summary>
    [DataContract]
    public partial class PlaybackState :  IEquatable<PlaybackState>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PlaybackState" /> class.
        /// </summary>
        /// <param name="token">token.</param>
        /// <param name="offsetInMilliseconds">offsetInMilliseconds.</param>
        /// <param name="playerActivity">playerActivity.</param>
        public PlaybackState(string token = default(string), long? offsetInMilliseconds = default(long?), string playerActivity = default(string))
        {
            this.Token = token;
            this.OffsetInMilliseconds = offsetInMilliseconds;
            this.PlayerActivity = playerActivity;
        }
        
        /// <summary>
        /// Gets or Sets Token
        /// </summary>
        [DataMember(Name="token", EmitDefaultValue=false)]
        public string Token { get; set; }

        /// <summary>
        /// Gets or Sets OffsetInMilliseconds
        /// </summary>
        [DataMember(Name="offsetInMilliseconds", EmitDefaultValue=false)]
        public long? OffsetInMilliseconds { get; set; }

        /// <summary>
        /// Gets or Sets PlayerActivity
        /// </summary>
        [DataMember(Name="playerActivity", EmitDefaultValue=false)]
        public string PlayerActivity { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PlaybackState {\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  OffsetInMilliseconds: ").Append(OffsetInMilliseconds).Append("\n");
            sb.Append("  PlayerActivity: ").Append(PlayerActivity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PlaybackState);
        }

        /// <summary>
        /// Returns true if PlaybackState instances are equal
        /// </summary>
        /// <param name="input">Instance of PlaybackState to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PlaybackState input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.OffsetInMilliseconds == input.OffsetInMilliseconds ||
                    (this.OffsetInMilliseconds != null &&
                    this.OffsetInMilliseconds.Equals(input.OffsetInMilliseconds))
                ) && 
                (
                    this.PlayerActivity == input.PlayerActivity ||
                    (this.PlayerActivity != null &&
                    this.PlayerActivity.Equals(input.PlayerActivity))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Token != null)
                    hashCode = hashCode * 59 + this.Token.GetHashCode();
                if (this.OffsetInMilliseconds != null)
                    hashCode = hashCode * 59 + this.OffsetInMilliseconds.GetHashCode();
                if (this.PlayerActivity != null)
                    hashCode = hashCode * 59 + this.PlayerActivity.GetHashCode();
                return hashCode;
            }
        }

    }

}

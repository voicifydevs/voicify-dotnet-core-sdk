/* 
 * Voicify Assistant API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace Voicify.Sdk.Core.Models.Model
{
    /// <summary>
    /// FulfillmentBasicCard
    /// </summary>
    [DataContract]
    public partial class FulfillmentBasicCard :  IEquatable<FulfillmentBasicCard>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FulfillmentBasicCard" /> class.
        /// </summary>
        /// <param name="formattedText">formattedText.</param>
        /// <param name="title">title.</param>
        /// <param name="subtitle">subtitle.</param>
        /// <param name="image">image.</param>
        public FulfillmentBasicCard(string formattedText = default(string), string title = default(string), string subtitle = default(string), FulfillmentImage image = default(FulfillmentImage))
        {
            this.FormattedText = formattedText;
            this.Title = title;
            this.Subtitle = subtitle;
            this.Image = image;
        }
        
        /// <summary>
        /// Gets or Sets FormattedText
        /// </summary>
        [DataMember(Name="formattedText", EmitDefaultValue=false)]
        public string FormattedText { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets Subtitle
        /// </summary>
        [DataMember(Name="subtitle", EmitDefaultValue=false)]
        public string Subtitle { get; set; }

        /// <summary>
        /// Gets or Sets Image
        /// </summary>
        [DataMember(Name="image", EmitDefaultValue=false)]
        public FulfillmentImage Image { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FulfillmentBasicCard {\n");
            sb.Append("  FormattedText: ").Append(FormattedText).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Subtitle: ").Append(Subtitle).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FulfillmentBasicCard);
        }

        /// <summary>
        /// Returns true if FulfillmentBasicCard instances are equal
        /// </summary>
        /// <param name="input">Instance of FulfillmentBasicCard to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FulfillmentBasicCard input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FormattedText == input.FormattedText ||
                    (this.FormattedText != null &&
                    this.FormattedText.Equals(input.FormattedText))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Subtitle == input.Subtitle ||
                    (this.Subtitle != null &&
                    this.Subtitle.Equals(input.Subtitle))
                ) && 
                (
                    this.Image == input.Image ||
                    (this.Image != null &&
                    this.Image.Equals(input.Image))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FormattedText != null)
                    hashCode = hashCode * 59 + this.FormattedText.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.Subtitle != null)
                    hashCode = hashCode * 59 + this.Subtitle.GetHashCode();
                if (this.Image != null)
                    hashCode = hashCode * 59 + this.Image.GetHashCode();
                return hashCode;
            }
        }

    }

}

/* 
 * Voicify Assistant API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace Voicify.Sdk.Core.Models.Model
{
    /// <summary>
    /// ResponseBody
    /// </summary>
    [DataContract]
    public partial class ResponseBody :  IEquatable<ResponseBody>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ResponseBody" /> class.
        /// </summary>
        /// <param name="outputSpeech">outputSpeech.</param>
        /// <param name="card">card.</param>
        /// <param name="reprompt">reprompt.</param>
        /// <param name="shouldEndSession">shouldEndSession.</param>
        /// <param name="directives">directives.</param>
        public ResponseBody(IOutputSpeech outputSpeech = default(IOutputSpeech), ICard card = default(ICard), Reprompt reprompt = default(Reprompt), bool? shouldEndSession = default(bool?), List<IDirective> directives = default(List<IDirective>))
        {
            this.OutputSpeech = outputSpeech;
            this.Card = card;
            this.Reprompt = reprompt;
            this.ShouldEndSession = shouldEndSession;
            this.Directives = directives;
        }
        
        /// <summary>
        /// Gets or Sets OutputSpeech
        /// </summary>
        [DataMember(Name="outputSpeech", EmitDefaultValue=false)]
        public IOutputSpeech OutputSpeech { get; set; }

        /// <summary>
        /// Gets or Sets Card
        /// </summary>
        [DataMember(Name="card", EmitDefaultValue=false)]
        public ICard Card { get; set; }

        /// <summary>
        /// Gets or Sets Reprompt
        /// </summary>
        [DataMember(Name="reprompt", EmitDefaultValue=false)]
        public Reprompt Reprompt { get; set; }

        /// <summary>
        /// Gets or Sets ShouldEndSession
        /// </summary>
        [DataMember(Name="shouldEndSession", EmitDefaultValue=false)]
        public bool? ShouldEndSession { get; set; }

        /// <summary>
        /// Gets or Sets Directives
        /// </summary>
        [DataMember(Name="directives", EmitDefaultValue=false)]
        public List<IDirective> Directives { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ResponseBody {\n");
            sb.Append("  OutputSpeech: ").Append(OutputSpeech).Append("\n");
            sb.Append("  Card: ").Append(Card).Append("\n");
            sb.Append("  Reprompt: ").Append(Reprompt).Append("\n");
            sb.Append("  ShouldEndSession: ").Append(ShouldEndSession).Append("\n");
            sb.Append("  Directives: ").Append(Directives).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ResponseBody);
        }

        /// <summary>
        /// Returns true if ResponseBody instances are equal
        /// </summary>
        /// <param name="input">Instance of ResponseBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ResponseBody input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OutputSpeech == input.OutputSpeech ||
                    (this.OutputSpeech != null &&
                    this.OutputSpeech.Equals(input.OutputSpeech))
                ) && 
                (
                    this.Card == input.Card ||
                    (this.Card != null &&
                    this.Card.Equals(input.Card))
                ) && 
                (
                    this.Reprompt == input.Reprompt ||
                    (this.Reprompt != null &&
                    this.Reprompt.Equals(input.Reprompt))
                ) && 
                (
                    this.ShouldEndSession == input.ShouldEndSession ||
                    (this.ShouldEndSession != null &&
                    this.ShouldEndSession.Equals(input.ShouldEndSession))
                ) && 
                (
                    this.Directives == input.Directives ||
                    this.Directives != null &&
                    this.Directives.SequenceEqual(input.Directives)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OutputSpeech != null)
                    hashCode = hashCode * 59 + this.OutputSpeech.GetHashCode();
                if (this.Card != null)
                    hashCode = hashCode * 59 + this.Card.GetHashCode();
                if (this.Reprompt != null)
                    hashCode = hashCode * 59 + this.Reprompt.GetHashCode();
                if (this.ShouldEndSession != null)
                    hashCode = hashCode * 59 + this.ShouldEndSession.GetHashCode();
                if (this.Directives != null)
                    hashCode = hashCode * 59 + this.Directives.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

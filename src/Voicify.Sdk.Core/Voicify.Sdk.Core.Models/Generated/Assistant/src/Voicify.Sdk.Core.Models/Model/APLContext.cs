/* 
 * Voicify Assistant API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace Voicify.Sdk.Core.Models.Model
{
    /// <summary>
    /// APLContext
    /// </summary>
    [DataContract]
    public partial class APLContext :  IEquatable<APLContext>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="APLContext" /> class.
        /// </summary>
        /// <param name="display">display.</param>
        /// <param name="viewport">viewport.</param>
        /// <param name="system">system.</param>
        /// <param name="audioPlayer">audioPlayer.</param>
        /// <param name="geolocation">geolocation.</param>
        public APLContext(AlexaDisplay display = default(AlexaDisplay), AlexaViewport viewport = default(AlexaViewport), AlexaSystem system = default(AlexaSystem), PlaybackState audioPlayer = default(PlaybackState), Geolocation geolocation = default(Geolocation))
        {
            this.Display = display;
            this.Viewport = viewport;
            this.System = system;
            this.AudioPlayer = audioPlayer;
            this.Geolocation = geolocation;
        }
        
        /// <summary>
        /// Gets or Sets Display
        /// </summary>
        [DataMember(Name="Display", EmitDefaultValue=false)]
        public AlexaDisplay Display { get; set; }

        /// <summary>
        /// Gets or Sets Viewport
        /// </summary>
        [DataMember(Name="Viewport", EmitDefaultValue=false)]
        public AlexaViewport Viewport { get; set; }

        /// <summary>
        /// Gets or Sets System
        /// </summary>
        [DataMember(Name="System", EmitDefaultValue=false)]
        public AlexaSystem System { get; set; }

        /// <summary>
        /// Gets or Sets AudioPlayer
        /// </summary>
        [DataMember(Name="AudioPlayer", EmitDefaultValue=false)]
        public PlaybackState AudioPlayer { get; set; }

        /// <summary>
        /// Gets or Sets Geolocation
        /// </summary>
        [DataMember(Name="Geolocation", EmitDefaultValue=false)]
        public Geolocation Geolocation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class APLContext {\n");
            sb.Append("  Display: ").Append(Display).Append("\n");
            sb.Append("  Viewport: ").Append(Viewport).Append("\n");
            sb.Append("  System: ").Append(System).Append("\n");
            sb.Append("  AudioPlayer: ").Append(AudioPlayer).Append("\n");
            sb.Append("  Geolocation: ").Append(Geolocation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as APLContext);
        }

        /// <summary>
        /// Returns true if APLContext instances are equal
        /// </summary>
        /// <param name="input">Instance of APLContext to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(APLContext input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Display == input.Display ||
                    (this.Display != null &&
                    this.Display.Equals(input.Display))
                ) && 
                (
                    this.Viewport == input.Viewport ||
                    (this.Viewport != null &&
                    this.Viewport.Equals(input.Viewport))
                ) && 
                (
                    this.System == input.System ||
                    (this.System != null &&
                    this.System.Equals(input.System))
                ) && 
                (
                    this.AudioPlayer == input.AudioPlayer ||
                    (this.AudioPlayer != null &&
                    this.AudioPlayer.Equals(input.AudioPlayer))
                ) && 
                (
                    this.Geolocation == input.Geolocation ||
                    (this.Geolocation != null &&
                    this.Geolocation.Equals(input.Geolocation))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Display != null)
                    hashCode = hashCode * 59 + this.Display.GetHashCode();
                if (this.Viewport != null)
                    hashCode = hashCode * 59 + this.Viewport.GetHashCode();
                if (this.System != null)
                    hashCode = hashCode * 59 + this.System.GetHashCode();
                if (this.AudioPlayer != null)
                    hashCode = hashCode * 59 + this.AudioPlayer.GetHashCode();
                if (this.Geolocation != null)
                    hashCode = hashCode * 59 + this.Geolocation.GetHashCode();
                return hashCode;
            }
        }

    }

}

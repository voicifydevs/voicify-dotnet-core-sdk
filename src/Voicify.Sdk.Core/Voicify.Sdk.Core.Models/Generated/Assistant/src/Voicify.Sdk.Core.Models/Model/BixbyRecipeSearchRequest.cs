/* 
 * Voicify Assistant API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace Voicify.Sdk.Core.Models.Model
{
    /// <summary>
    /// BixbyRecipeSearchRequest
    /// </summary>
    [DataContract]
    public partial class BixbyRecipeSearchRequest : Dictionary<String, Object>,  IEquatable<BixbyRecipeSearchRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BixbyRecipeSearchRequest" /> class.
        /// </summary>
        /// <param name="recipeName">recipeName.</param>
        /// <param name="ingredientName">ingredientName.</param>
        /// <param name="mealType">mealType.</param>
        /// <param name="cookTime">cookTime.</param>
        /// <param name="vivContext">vivContext.</param>
        public BixbyRecipeSearchRequest(string recipeName = default(string), string ingredientName = default(string), string mealType = default(string), DateTime? cookTime = default(DateTime?), VivContext vivContext = default(VivContext)) : base()
        {
            this.RecipeName = recipeName;
            this.IngredientName = ingredientName;
            this.MealType = mealType;
            this.CookTime = cookTime;
            this.VivContext = vivContext;
        }
        
        /// <summary>
        /// Gets or Sets RecipeName
        /// </summary>
        [DataMember(Name="recipeName", EmitDefaultValue=false)]
        public string RecipeName { get; set; }

        /// <summary>
        /// Gets or Sets IngredientName
        /// </summary>
        [DataMember(Name="ingredientName", EmitDefaultValue=false)]
        public string IngredientName { get; set; }

        /// <summary>
        /// Gets or Sets MealType
        /// </summary>
        [DataMember(Name="mealType", EmitDefaultValue=false)]
        public string MealType { get; set; }

        /// <summary>
        /// Gets or Sets CookTime
        /// </summary>
        [DataMember(Name="cookTime", EmitDefaultValue=false)]
        public DateTime? CookTime { get; set; }

        /// <summary>
        /// Gets or Sets VivContext
        /// </summary>
        [DataMember(Name="$vivContext", EmitDefaultValue=false)]
        public VivContext VivContext { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BixbyRecipeSearchRequest {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  RecipeName: ").Append(RecipeName).Append("\n");
            sb.Append("  IngredientName: ").Append(IngredientName).Append("\n");
            sb.Append("  MealType: ").Append(MealType).Append("\n");
            sb.Append("  CookTime: ").Append(CookTime).Append("\n");
            sb.Append("  VivContext: ").Append(VivContext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BixbyRecipeSearchRequest);
        }

        /// <summary>
        /// Returns true if BixbyRecipeSearchRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of BixbyRecipeSearchRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BixbyRecipeSearchRequest input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.RecipeName == input.RecipeName ||
                    (this.RecipeName != null &&
                    this.RecipeName.Equals(input.RecipeName))
                ) && base.Equals(input) && 
                (
                    this.IngredientName == input.IngredientName ||
                    (this.IngredientName != null &&
                    this.IngredientName.Equals(input.IngredientName))
                ) && base.Equals(input) && 
                (
                    this.MealType == input.MealType ||
                    (this.MealType != null &&
                    this.MealType.Equals(input.MealType))
                ) && base.Equals(input) && 
                (
                    this.CookTime == input.CookTime ||
                    (this.CookTime != null &&
                    this.CookTime.Equals(input.CookTime))
                ) && base.Equals(input) && 
                (
                    this.VivContext == input.VivContext ||
                    (this.VivContext != null &&
                    this.VivContext.Equals(input.VivContext))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.RecipeName != null)
                    hashCode = hashCode * 59 + this.RecipeName.GetHashCode();
                if (this.IngredientName != null)
                    hashCode = hashCode * 59 + this.IngredientName.GetHashCode();
                if (this.MealType != null)
                    hashCode = hashCode * 59 + this.MealType.GetHashCode();
                if (this.CookTime != null)
                    hashCode = hashCode * 59 + this.CookTime.GetHashCode();
                if (this.VivContext != null)
                    hashCode = hashCode * 59 + this.VivContext.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
                     yield break;
        }
    }

}

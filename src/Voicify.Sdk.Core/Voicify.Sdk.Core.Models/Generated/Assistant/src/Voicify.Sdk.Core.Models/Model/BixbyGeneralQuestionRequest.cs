/* 
 * Voicify Assistant API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace Voicify.Sdk.Core.Models.Model
{
    /// <summary>
    /// BixbyGeneralQuestionRequest
    /// </summary>
    [DataContract]
    public partial class BixbyGeneralQuestionRequest : Dictionary<String, Object>,  IEquatable<BixbyGeneralQuestionRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BixbyGeneralQuestionRequest" /> class.
        /// </summary>
        /// <param name="voicifyQuery">voicifyQuery.</param>
        /// <param name="vivContext">vivContext.</param>
        public BixbyGeneralQuestionRequest(string voicifyQuery = default(string), VivContext vivContext = default(VivContext)) : base()
        {
            this.VoicifyQuery = voicifyQuery;
            this.VivContext = vivContext;
        }
        
        /// <summary>
        /// Gets or Sets VoicifyQuery
        /// </summary>
        [DataMember(Name="voicifyQuery", EmitDefaultValue=false)]
        public string VoicifyQuery { get; set; }

        /// <summary>
        /// Gets or Sets VivContext
        /// </summary>
        [DataMember(Name="$vivContext", EmitDefaultValue=false)]
        public VivContext VivContext { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BixbyGeneralQuestionRequest {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  VoicifyQuery: ").Append(VoicifyQuery).Append("\n");
            sb.Append("  VivContext: ").Append(VivContext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BixbyGeneralQuestionRequest);
        }

        /// <summary>
        /// Returns true if BixbyGeneralQuestionRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of BixbyGeneralQuestionRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BixbyGeneralQuestionRequest input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.VoicifyQuery == input.VoicifyQuery ||
                    (this.VoicifyQuery != null &&
                    this.VoicifyQuery.Equals(input.VoicifyQuery))
                ) && base.Equals(input) && 
                (
                    this.VivContext == input.VivContext ||
                    (this.VivContext != null &&
                    this.VivContext.Equals(input.VivContext))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.VoicifyQuery != null)
                    hashCode = hashCode * 59 + this.VoicifyQuery.GetHashCode();
                if (this.VivContext != null)
                    hashCode = hashCode * 59 + this.VivContext.GetHashCode();
                return hashCode;
            }
        }

    }

}

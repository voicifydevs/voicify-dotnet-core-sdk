/* 
 * Voicify Assistant API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace Voicify.Sdk.Core.Models.Model
{
    /// <summary>
    /// GeolocationSpeed
    /// </summary>
    [DataContract]
    public partial class GeolocationSpeed :  IEquatable<GeolocationSpeed>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GeolocationSpeed" /> class.
        /// </summary>
        /// <param name="speedInMetersPerSecond">speedInMetersPerSecond.</param>
        /// <param name="accuracyInMetresPerSecond">accuracyInMetresPerSecond.</param>
        public GeolocationSpeed(double? speedInMetersPerSecond = default(double?), double? accuracyInMetresPerSecond = default(double?))
        {
            this.SpeedInMetersPerSecond = speedInMetersPerSecond;
            this.AccuracyInMetresPerSecond = accuracyInMetresPerSecond;
        }
        
        /// <summary>
        /// Gets or Sets SpeedInMetersPerSecond
        /// </summary>
        [DataMember(Name="speedInMetersPerSecond", EmitDefaultValue=false)]
        public double? SpeedInMetersPerSecond { get; set; }

        /// <summary>
        /// Gets or Sets AccuracyInMetresPerSecond
        /// </summary>
        [DataMember(Name="accuracyInMetresPerSecond", EmitDefaultValue=false)]
        public double? AccuracyInMetresPerSecond { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GeolocationSpeed {\n");
            sb.Append("  SpeedInMetersPerSecond: ").Append(SpeedInMetersPerSecond).Append("\n");
            sb.Append("  AccuracyInMetresPerSecond: ").Append(AccuracyInMetresPerSecond).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GeolocationSpeed);
        }

        /// <summary>
        /// Returns true if GeolocationSpeed instances are equal
        /// </summary>
        /// <param name="input">Instance of GeolocationSpeed to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GeolocationSpeed input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SpeedInMetersPerSecond == input.SpeedInMetersPerSecond ||
                    (this.SpeedInMetersPerSecond != null &&
                    this.SpeedInMetersPerSecond.Equals(input.SpeedInMetersPerSecond))
                ) && 
                (
                    this.AccuracyInMetresPerSecond == input.AccuracyInMetresPerSecond ||
                    (this.AccuracyInMetresPerSecond != null &&
                    this.AccuracyInMetresPerSecond.Equals(input.AccuracyInMetresPerSecond))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SpeedInMetersPerSecond != null)
                    hashCode = hashCode * 59 + this.SpeedInMetersPerSecond.GetHashCode();
                if (this.AccuracyInMetresPerSecond != null)
                    hashCode = hashCode * 59 + this.AccuracyInMetresPerSecond.GetHashCode();
                return hashCode;
            }
        }

    }

}

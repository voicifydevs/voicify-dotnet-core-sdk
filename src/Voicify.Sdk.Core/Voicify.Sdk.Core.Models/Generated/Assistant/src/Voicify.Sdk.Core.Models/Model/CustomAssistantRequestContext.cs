/* 
 * Voicify Assistant API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace Voicify.Sdk.Core.Models.Model
{
    /// <summary>
    /// CustomAssistantRequestContext
    /// </summary>
    [DataContract]
    public partial class CustomAssistantRequestContext :  IEquatable<CustomAssistantRequestContext>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomAssistantRequestContext" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CustomAssistantRequestContext() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomAssistantRequestContext" /> class.
        /// </summary>
        /// <param name="sessionId">sessionId (required).</param>
        /// <param name="noTracking">noTracking.</param>
        /// <param name="requestType">requestType (required).</param>
        /// <param name="requestName">requestName.</param>
        /// <param name="slots">slots.</param>
        /// <param name="originalInput">originalInput.</param>
        /// <param name="channel">channel (required).</param>
        /// <param name="requiresLanguageUnderstanding">requiresLanguageUnderstanding.</param>
        /// <param name="locale">locale.</param>
        public CustomAssistantRequestContext(string sessionId = default(string), bool? noTracking = default(bool?), string requestType = default(string), string requestName = default(string), Dictionary<string, string> slots = default(Dictionary<string, string>), string originalInput = default(string), string channel = default(string), bool? requiresLanguageUnderstanding = default(bool?), string locale = default(string))
        {
            // to ensure "sessionId" is required (not null)
            if (sessionId == null)
            {
                throw new InvalidDataException("sessionId is a required property for CustomAssistantRequestContext and cannot be null");
            }
            else
            {
                this.SessionId = sessionId;
            }
            // to ensure "requestType" is required (not null)
            if (requestType == null)
            {
                throw new InvalidDataException("requestType is a required property for CustomAssistantRequestContext and cannot be null");
            }
            else
            {
                this.RequestType = requestType;
            }
            // to ensure "channel" is required (not null)
            if (channel == null)
            {
                throw new InvalidDataException("channel is a required property for CustomAssistantRequestContext and cannot be null");
            }
            else
            {
                this.Channel = channel;
            }
            this.NoTracking = noTracking;
            this.RequestName = requestName;
            this.Slots = slots;
            this.OriginalInput = originalInput;
            this.RequiresLanguageUnderstanding = requiresLanguageUnderstanding;
            this.Locale = locale;
        }
        
        /// <summary>
        /// Gets or Sets SessionId
        /// </summary>
        [DataMember(Name="sessionId", EmitDefaultValue=false)]
        public string SessionId { get; set; }

        /// <summary>
        /// Gets or Sets NoTracking
        /// </summary>
        [DataMember(Name="noTracking", EmitDefaultValue=false)]
        public bool? NoTracking { get; set; }

        /// <summary>
        /// Gets or Sets RequestType
        /// </summary>
        [DataMember(Name="requestType", EmitDefaultValue=false)]
        public string RequestType { get; set; }

        /// <summary>
        /// Gets or Sets RequestName
        /// </summary>
        [DataMember(Name="requestName", EmitDefaultValue=false)]
        public string RequestName { get; set; }

        /// <summary>
        /// Gets or Sets Slots
        /// </summary>
        [DataMember(Name="slots", EmitDefaultValue=false)]
        public Dictionary<string, string> Slots { get; set; }

        /// <summary>
        /// Gets or Sets OriginalInput
        /// </summary>
        [DataMember(Name="originalInput", EmitDefaultValue=false)]
        public string OriginalInput { get; set; }

        /// <summary>
        /// Gets or Sets Channel
        /// </summary>
        [DataMember(Name="channel", EmitDefaultValue=false)]
        public string Channel { get; set; }

        /// <summary>
        /// Gets or Sets RequiresLanguageUnderstanding
        /// </summary>
        [DataMember(Name="requiresLanguageUnderstanding", EmitDefaultValue=false)]
        public bool? RequiresLanguageUnderstanding { get; set; }

        /// <summary>
        /// Gets or Sets Locale
        /// </summary>
        [DataMember(Name="locale", EmitDefaultValue=false)]
        public string Locale { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomAssistantRequestContext {\n");
            sb.Append("  SessionId: ").Append(SessionId).Append("\n");
            sb.Append("  NoTracking: ").Append(NoTracking).Append("\n");
            sb.Append("  RequestType: ").Append(RequestType).Append("\n");
            sb.Append("  RequestName: ").Append(RequestName).Append("\n");
            sb.Append("  Slots: ").Append(Slots).Append("\n");
            sb.Append("  OriginalInput: ").Append(OriginalInput).Append("\n");
            sb.Append("  Channel: ").Append(Channel).Append("\n");
            sb.Append("  RequiresLanguageUnderstanding: ").Append(RequiresLanguageUnderstanding).Append("\n");
            sb.Append("  Locale: ").Append(Locale).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomAssistantRequestContext);
        }

        /// <summary>
        /// Returns true if CustomAssistantRequestContext instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomAssistantRequestContext to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomAssistantRequestContext input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SessionId == input.SessionId ||
                    (this.SessionId != null &&
                    this.SessionId.Equals(input.SessionId))
                ) && 
                (
                    this.NoTracking == input.NoTracking ||
                    (this.NoTracking != null &&
                    this.NoTracking.Equals(input.NoTracking))
                ) && 
                (
                    this.RequestType == input.RequestType ||
                    (this.RequestType != null &&
                    this.RequestType.Equals(input.RequestType))
                ) && 
                (
                    this.RequestName == input.RequestName ||
                    (this.RequestName != null &&
                    this.RequestName.Equals(input.RequestName))
                ) && 
                (
                    this.Slots == input.Slots ||
                    this.Slots != null &&
                    this.Slots.SequenceEqual(input.Slots)
                ) && 
                (
                    this.OriginalInput == input.OriginalInput ||
                    (this.OriginalInput != null &&
                    this.OriginalInput.Equals(input.OriginalInput))
                ) && 
                (
                    this.Channel == input.Channel ||
                    (this.Channel != null &&
                    this.Channel.Equals(input.Channel))
                ) && 
                (
                    this.RequiresLanguageUnderstanding == input.RequiresLanguageUnderstanding ||
                    (this.RequiresLanguageUnderstanding != null &&
                    this.RequiresLanguageUnderstanding.Equals(input.RequiresLanguageUnderstanding))
                ) && 
                (
                    this.Locale == input.Locale ||
                    (this.Locale != null &&
                    this.Locale.Equals(input.Locale))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SessionId != null)
                    hashCode = hashCode * 59 + this.SessionId.GetHashCode();
                if (this.NoTracking != null)
                    hashCode = hashCode * 59 + this.NoTracking.GetHashCode();
                if (this.RequestType != null)
                    hashCode = hashCode * 59 + this.RequestType.GetHashCode();
                if (this.RequestName != null)
                    hashCode = hashCode * 59 + this.RequestName.GetHashCode();
                if (this.Slots != null)
                    hashCode = hashCode * 59 + this.Slots.GetHashCode();
                if (this.OriginalInput != null)
                    hashCode = hashCode * 59 + this.OriginalInput.GetHashCode();
                if (this.Channel != null)
                    hashCode = hashCode * 59 + this.Channel.GetHashCode();
                if (this.RequiresLanguageUnderstanding != null)
                    hashCode = hashCode * 59 + this.RequiresLanguageUnderstanding.GetHashCode();
                if (this.Locale != null)
                    hashCode = hashCode * 59 + this.Locale.GetHashCode();
                return hashCode;
            }
        }

    }

}

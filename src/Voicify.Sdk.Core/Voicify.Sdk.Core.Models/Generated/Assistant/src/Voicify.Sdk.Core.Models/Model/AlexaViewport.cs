/* 
 * Voicify Assistant API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace Voicify.Sdk.Core.Models.Model
{
    /// <summary>
    /// AlexaViewport
    /// </summary>
    [DataContract]
    public partial class AlexaViewport :  IEquatable<AlexaViewport>, IValidatableObject
    {
        /// <summary>
        /// Defines Shape
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ShapeEnum
        {
            
            /// <summary>
            /// Enum SQUARE for value: SQUARE
            /// </summary>
            [EnumMember(Value = "SQUARE")]
            SQUARE = 1,
            
            /// <summary>
            /// Enum RECTANGLE for value: RECTANGLE
            /// </summary>
            [EnumMember(Value = "RECTANGLE")]
            RECTANGLE = 2,
            
            /// <summary>
            /// Enum ROUND for value: ROUND
            /// </summary>
            [EnumMember(Value = "ROUND")]
            ROUND = 3
        }

        /// <summary>
        /// Gets or Sets Shape
        /// </summary>
        [DataMember(Name="shape", EmitDefaultValue=false)]
        public ShapeEnum? Shape { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AlexaViewport" /> class.
        /// </summary>
        /// <param name="experiences">experiences.</param>
        /// <param name="currentPixelWidth">currentPixelWidth.</param>
        /// <param name="currentPixelHeight">currentPixelHeight.</param>
        /// <param name="dpi">dpi.</param>
        /// <param name="pixelHeight">pixelHeight.</param>
        /// <param name="pixelWidth">pixelWidth.</param>
        /// <param name="touch">touch.</param>
        /// <param name="keyboard">keyboard.</param>
        /// <param name="shape">shape.</param>
        /// <param name="video">video.</param>
        public AlexaViewport(List<ViewportExperience> experiences = default(List<ViewportExperience>), int? currentPixelWidth = default(int?), int? currentPixelHeight = default(int?), int? dpi = default(int?), int? pixelHeight = default(int?), int? pixelWidth = default(int?), List<string> touch = default(List<string>), List<string> keyboard = default(List<string>), ShapeEnum? shape = default(ShapeEnum?), VideoSupport video = default(VideoSupport))
        {
            this.Experiences = experiences;
            this.CurrentPixelWidth = currentPixelWidth;
            this.CurrentPixelHeight = currentPixelHeight;
            this.Dpi = dpi;
            this.PixelHeight = pixelHeight;
            this.PixelWidth = pixelWidth;
            this.Touch = touch;
            this.Keyboard = keyboard;
            this.Shape = shape;
            this.Video = video;
        }
        
        /// <summary>
        /// Gets or Sets Experiences
        /// </summary>
        [DataMember(Name="experiences", EmitDefaultValue=false)]
        public List<ViewportExperience> Experiences { get; set; }

        /// <summary>
        /// Gets or Sets CurrentPixelWidth
        /// </summary>
        [DataMember(Name="currentPixelWidth", EmitDefaultValue=false)]
        public int? CurrentPixelWidth { get; set; }

        /// <summary>
        /// Gets or Sets CurrentPixelHeight
        /// </summary>
        [DataMember(Name="currentPixelHeight", EmitDefaultValue=false)]
        public int? CurrentPixelHeight { get; set; }

        /// <summary>
        /// Gets or Sets Dpi
        /// </summary>
        [DataMember(Name="dpi", EmitDefaultValue=false)]
        public int? Dpi { get; set; }

        /// <summary>
        /// Gets or Sets PixelHeight
        /// </summary>
        [DataMember(Name="pixelHeight", EmitDefaultValue=false)]
        public int? PixelHeight { get; set; }

        /// <summary>
        /// Gets or Sets PixelWidth
        /// </summary>
        [DataMember(Name="pixelWidth", EmitDefaultValue=false)]
        public int? PixelWidth { get; set; }

        /// <summary>
        /// Gets or Sets Touch
        /// </summary>
        [DataMember(Name="touch", EmitDefaultValue=false)]
        public List<string> Touch { get; set; }

        /// <summary>
        /// Gets or Sets Keyboard
        /// </summary>
        [DataMember(Name="keyboard", EmitDefaultValue=false)]
        public List<string> Keyboard { get; set; }


        /// <summary>
        /// Gets or Sets Video
        /// </summary>
        [DataMember(Name="video", EmitDefaultValue=false)]
        public VideoSupport Video { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AlexaViewport {\n");
            sb.Append("  Experiences: ").Append(Experiences).Append("\n");
            sb.Append("  CurrentPixelWidth: ").Append(CurrentPixelWidth).Append("\n");
            sb.Append("  CurrentPixelHeight: ").Append(CurrentPixelHeight).Append("\n");
            sb.Append("  Dpi: ").Append(Dpi).Append("\n");
            sb.Append("  PixelHeight: ").Append(PixelHeight).Append("\n");
            sb.Append("  PixelWidth: ").Append(PixelWidth).Append("\n");
            sb.Append("  Touch: ").Append(Touch).Append("\n");
            sb.Append("  Keyboard: ").Append(Keyboard).Append("\n");
            sb.Append("  Shape: ").Append(Shape).Append("\n");
            sb.Append("  Video: ").Append(Video).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AlexaViewport);
        }

        /// <summary>
        /// Returns true if AlexaViewport instances are equal
        /// </summary>
        /// <param name="input">Instance of AlexaViewport to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AlexaViewport input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Experiences == input.Experiences ||
                    this.Experiences != null &&
                    this.Experiences.SequenceEqual(input.Experiences)
                ) && 
                (
                    this.CurrentPixelWidth == input.CurrentPixelWidth ||
                    (this.CurrentPixelWidth != null &&
                    this.CurrentPixelWidth.Equals(input.CurrentPixelWidth))
                ) && 
                (
                    this.CurrentPixelHeight == input.CurrentPixelHeight ||
                    (this.CurrentPixelHeight != null &&
                    this.CurrentPixelHeight.Equals(input.CurrentPixelHeight))
                ) && 
                (
                    this.Dpi == input.Dpi ||
                    (this.Dpi != null &&
                    this.Dpi.Equals(input.Dpi))
                ) && 
                (
                    this.PixelHeight == input.PixelHeight ||
                    (this.PixelHeight != null &&
                    this.PixelHeight.Equals(input.PixelHeight))
                ) && 
                (
                    this.PixelWidth == input.PixelWidth ||
                    (this.PixelWidth != null &&
                    this.PixelWidth.Equals(input.PixelWidth))
                ) && 
                (
                    this.Touch == input.Touch ||
                    this.Touch != null &&
                    this.Touch.SequenceEqual(input.Touch)
                ) && 
                (
                    this.Keyboard == input.Keyboard ||
                    this.Keyboard != null &&
                    this.Keyboard.SequenceEqual(input.Keyboard)
                ) && 
                (
                    this.Shape == input.Shape ||
                    (this.Shape != null &&
                    this.Shape.Equals(input.Shape))
                ) && 
                (
                    this.Video == input.Video ||
                    (this.Video != null &&
                    this.Video.Equals(input.Video))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Experiences != null)
                    hashCode = hashCode * 59 + this.Experiences.GetHashCode();
                if (this.CurrentPixelWidth != null)
                    hashCode = hashCode * 59 + this.CurrentPixelWidth.GetHashCode();
                if (this.CurrentPixelHeight != null)
                    hashCode = hashCode * 59 + this.CurrentPixelHeight.GetHashCode();
                if (this.Dpi != null)
                    hashCode = hashCode * 59 + this.Dpi.GetHashCode();
                if (this.PixelHeight != null)
                    hashCode = hashCode * 59 + this.PixelHeight.GetHashCode();
                if (this.PixelWidth != null)
                    hashCode = hashCode * 59 + this.PixelWidth.GetHashCode();
                if (this.Touch != null)
                    hashCode = hashCode * 59 + this.Touch.GetHashCode();
                if (this.Keyboard != null)
                    hashCode = hashCode * 59 + this.Keyboard.GetHashCode();
                if (this.Shape != null)
                    hashCode = hashCode * 59 + this.Shape.GetHashCode();
                if (this.Video != null)
                    hashCode = hashCode * 59 + this.Video.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

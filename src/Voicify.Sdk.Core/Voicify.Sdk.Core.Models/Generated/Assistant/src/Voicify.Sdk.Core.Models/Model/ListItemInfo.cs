/* 
 * Voicify Assistant API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace Voicify.Sdk.Core.Models.Model
{
    /// <summary>
    /// ListItemInfo
    /// </summary>
    [DataContract]
    public partial class ListItemInfo :  IEquatable<ListItemInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ListItemInfo" /> class.
        /// </summary>
        /// <param name="key">key.</param>
        /// <param name="synonyms">synonyms.</param>
        public ListItemInfo(string key = default(string), List<string> synonyms = default(List<string>))
        {
            this.Key = key;
            this.Synonyms = synonyms;
        }
        
        /// <summary>
        /// Gets or Sets Key
        /// </summary>
        [DataMember(Name="key", EmitDefaultValue=false)]
        public string Key { get; set; }

        /// <summary>
        /// Gets or Sets Synonyms
        /// </summary>
        [DataMember(Name="synonyms", EmitDefaultValue=false)]
        public List<string> Synonyms { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ListItemInfo {\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Synonyms: ").Append(Synonyms).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ListItemInfo);
        }

        /// <summary>
        /// Returns true if ListItemInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of ListItemInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ListItemInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Key == input.Key ||
                    (this.Key != null &&
                    this.Key.Equals(input.Key))
                ) && 
                (
                    this.Synonyms == input.Synonyms ||
                    this.Synonyms != null &&
                    this.Synonyms.SequenceEqual(input.Synonyms)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Key != null)
                    hashCode = hashCode * 59 + this.Key.GetHashCode();
                if (this.Synonyms != null)
                    hashCode = hashCode * 59 + this.Synonyms.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

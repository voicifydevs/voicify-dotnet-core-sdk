/* 
 * Voicify Assistant API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace Voicify.Sdk.Core.Models.Model
{
    /// <summary>
    /// CustomAssistantRequestBody
    /// </summary>
    [DataContract]
    public partial class CustomAssistantRequestBody :  IEquatable<CustomAssistantRequestBody>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomAssistantRequestBody" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CustomAssistantRequestBody() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomAssistantRequestBody" /> class.
        /// </summary>
        /// <param name="requestId">requestId (required).</param>
        /// <param name="context">context (required).</param>
        /// <param name="device">device (required).</param>
        /// <param name="user">user (required).</param>
        public CustomAssistantRequestBody(string requestId = default(string), CustomAssistantRequestContext context = default(CustomAssistantRequestContext), CustomAssistantDevice device = default(CustomAssistantDevice), CustomAssistantUser user = default(CustomAssistantUser))
        {
            // to ensure "requestId" is required (not null)
            if (requestId == null)
            {
                throw new InvalidDataException("requestId is a required property for CustomAssistantRequestBody and cannot be null");
            }
            else
            {
                this.RequestId = requestId;
            }
            // to ensure "context" is required (not null)
            if (context == null)
            {
                throw new InvalidDataException("context is a required property for CustomAssistantRequestBody and cannot be null");
            }
            else
            {
                this.Context = context;
            }
            // to ensure "device" is required (not null)
            if (device == null)
            {
                throw new InvalidDataException("device is a required property for CustomAssistantRequestBody and cannot be null");
            }
            else
            {
                this.Device = device;
            }
            // to ensure "user" is required (not null)
            if (user == null)
            {
                throw new InvalidDataException("user is a required property for CustomAssistantRequestBody and cannot be null");
            }
            else
            {
                this.User = user;
            }
        }
        
        /// <summary>
        /// Gets or Sets RequestId
        /// </summary>
        [DataMember(Name="requestId", EmitDefaultValue=false)]
        public string RequestId { get; set; }

        /// <summary>
        /// Gets or Sets Context
        /// </summary>
        [DataMember(Name="context", EmitDefaultValue=false)]
        public CustomAssistantRequestContext Context { get; set; }

        /// <summary>
        /// Gets or Sets Device
        /// </summary>
        [DataMember(Name="device", EmitDefaultValue=false)]
        public CustomAssistantDevice Device { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public CustomAssistantUser User { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomAssistantRequestBody {\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("  Device: ").Append(Device).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomAssistantRequestBody);
        }

        /// <summary>
        /// Returns true if CustomAssistantRequestBody instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomAssistantRequestBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomAssistantRequestBody input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RequestId == input.RequestId ||
                    (this.RequestId != null &&
                    this.RequestId.Equals(input.RequestId))
                ) && 
                (
                    this.Context == input.Context ||
                    (this.Context != null &&
                    this.Context.Equals(input.Context))
                ) && 
                (
                    this.Device == input.Device ||
                    (this.Device != null &&
                    this.Device.Equals(input.Device))
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RequestId != null)
                    hashCode = hashCode * 59 + this.RequestId.GetHashCode();
                if (this.Context != null)
                    hashCode = hashCode * 59 + this.Context.GetHashCode();
                if (this.Device != null)
                    hashCode = hashCode * 59 + this.Device.GetHashCode();
                if (this.User != null)
                    hashCode = hashCode * 59 + this.User.GetHashCode();
                return hashCode;
            }
        }

    }

}

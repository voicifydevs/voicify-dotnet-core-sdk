/* 
 * Voicify CMS API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace Voicify.Sdk.Core.Models.Model
{
    /// <summary>
    /// SingleSignOnRequest
    /// </summary>
    [DataContract]
        public partial class SingleSignOnRequest :  IEquatable<SingleSignOnRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SingleSignOnRequest" /> class.
        /// </summary>
        /// <param name="clientId">clientId (required).</param>
        /// <param name="clientSecret">clientSecret (required).</param>
        /// <param name="email">email (required).</param>
        /// <param name="loginCompleteUrl">loginCompleteUrl (required).</param>
        /// <param name="firstName">firstName.</param>
        /// <param name="lastName">lastName.</param>
        /// <param name="agreedToTerms">agreedToTerms.</param>
        public SingleSignOnRequest(string clientId = default(string), string clientSecret = default(string), string email = default(string), string loginCompleteUrl = default(string), string firstName = default(string), string lastName = default(string), bool? agreedToTerms = default(bool?))
        {
            // to ensure "clientId" is required (not null)
            if (clientId == null)
            {
                throw new InvalidDataException("clientId is a required property for SingleSignOnRequest and cannot be null");
            }
            else
            {
                this.ClientId = clientId;
            }
            // to ensure "clientSecret" is required (not null)
            if (clientSecret == null)
            {
                throw new InvalidDataException("clientSecret is a required property for SingleSignOnRequest and cannot be null");
            }
            else
            {
                this.ClientSecret = clientSecret;
            }
            // to ensure "email" is required (not null)
            if (email == null)
            {
                throw new InvalidDataException("email is a required property for SingleSignOnRequest and cannot be null");
            }
            else
            {
                this.Email = email;
            }
            // to ensure "loginCompleteUrl" is required (not null)
            if (loginCompleteUrl == null)
            {
                throw new InvalidDataException("loginCompleteUrl is a required property for SingleSignOnRequest and cannot be null");
            }
            else
            {
                this.LoginCompleteUrl = loginCompleteUrl;
            }
            this.FirstName = firstName;
            this.LastName = lastName;
            this.AgreedToTerms = agreedToTerms;
        }
        
        /// <summary>
        /// Gets or Sets ClientId
        /// </summary>
        [DataMember(Name="clientId", EmitDefaultValue=false)]
        public string ClientId { get; set; }

        /// <summary>
        /// Gets or Sets ClientSecret
        /// </summary>
        [DataMember(Name="clientSecret", EmitDefaultValue=false)]
        public string ClientSecret { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets LoginCompleteUrl
        /// </summary>
        [DataMember(Name="loginCompleteUrl", EmitDefaultValue=false)]
        public string LoginCompleteUrl { get; set; }

        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [DataMember(Name="firstName", EmitDefaultValue=false)]
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or Sets LastName
        /// </summary>
        [DataMember(Name="lastName", EmitDefaultValue=false)]
        public string LastName { get; set; }

        /// <summary>
        /// Gets or Sets AgreedToTerms
        /// </summary>
        [DataMember(Name="agreedToTerms", EmitDefaultValue=false)]
        public bool? AgreedToTerms { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SingleSignOnRequest {\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  ClientSecret: ").Append(ClientSecret).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  LoginCompleteUrl: ").Append(LoginCompleteUrl).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  AgreedToTerms: ").Append(AgreedToTerms).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SingleSignOnRequest);
        }

        /// <summary>
        /// Returns true if SingleSignOnRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SingleSignOnRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SingleSignOnRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ClientId == input.ClientId ||
                    (this.ClientId != null &&
                    this.ClientId.Equals(input.ClientId))
                ) && 
                (
                    this.ClientSecret == input.ClientSecret ||
                    (this.ClientSecret != null &&
                    this.ClientSecret.Equals(input.ClientSecret))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.LoginCompleteUrl == input.LoginCompleteUrl ||
                    (this.LoginCompleteUrl != null &&
                    this.LoginCompleteUrl.Equals(input.LoginCompleteUrl))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.LastName == input.LastName ||
                    (this.LastName != null &&
                    this.LastName.Equals(input.LastName))
                ) && 
                (
                    this.AgreedToTerms == input.AgreedToTerms ||
                    (this.AgreedToTerms != null &&
                    this.AgreedToTerms.Equals(input.AgreedToTerms))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ClientId != null)
                    hashCode = hashCode * 59 + this.ClientId.GetHashCode();
                if (this.ClientSecret != null)
                    hashCode = hashCode * 59 + this.ClientSecret.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.LoginCompleteUrl != null)
                    hashCode = hashCode * 59 + this.LoginCompleteUrl.GetHashCode();
                if (this.FirstName != null)
                    hashCode = hashCode * 59 + this.FirstName.GetHashCode();
                if (this.LastName != null)
                    hashCode = hashCode * 59 + this.LastName.GetHashCode();
                if (this.AgreedToTerms != null)
                    hashCode = hashCode * 59 + this.AgreedToTerms.GetHashCode();
                return hashCode;
            }
        }

    }
}

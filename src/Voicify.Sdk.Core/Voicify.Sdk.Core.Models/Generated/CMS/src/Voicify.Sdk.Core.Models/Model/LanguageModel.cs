/* 
 * Voicify CMS API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace Voicify.Sdk.Core.Models.Model
{
    /// <summary>
    /// LanguageModel
    /// </summary>
    [DataContract]
    public partial class LanguageModel :  IEquatable<LanguageModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LanguageModel" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="shortCode">shortCode.</param>
        /// <param name="languageGroupCode">languageGroupCode.</param>
        /// <param name="regionCode">regionCode.</param>
        /// <param name="supportedPlatforms">supportedPlatforms.</param>
        public LanguageModel(string id = default(string), string shortCode = default(string), string languageGroupCode = default(string), string regionCode = default(string), string supportedPlatforms = default(string))
        {
            this.Id = id;
            this.ShortCode = shortCode;
            this.LanguageGroupCode = languageGroupCode;
            this.RegionCode = regionCode;
            this.SupportedPlatforms = supportedPlatforms;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets ShortCode
        /// </summary>
        [DataMember(Name="shortCode", EmitDefaultValue=false)]
        public string ShortCode { get; set; }

        /// <summary>
        /// Gets or Sets LanguageGroupCode
        /// </summary>
        [DataMember(Name="languageGroupCode", EmitDefaultValue=false)]
        public string LanguageGroupCode { get; set; }

        /// <summary>
        /// Gets or Sets RegionCode
        /// </summary>
        [DataMember(Name="regionCode", EmitDefaultValue=false)]
        public string RegionCode { get; set; }

        /// <summary>
        /// Gets or Sets SupportedPlatforms
        /// </summary>
        [DataMember(Name="supportedPlatforms", EmitDefaultValue=false)]
        public string SupportedPlatforms { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LanguageModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ShortCode: ").Append(ShortCode).Append("\n");
            sb.Append("  LanguageGroupCode: ").Append(LanguageGroupCode).Append("\n");
            sb.Append("  RegionCode: ").Append(RegionCode).Append("\n");
            sb.Append("  SupportedPlatforms: ").Append(SupportedPlatforms).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LanguageModel);
        }

        /// <summary>
        /// Returns true if LanguageModel instances are equal
        /// </summary>
        /// <param name="input">Instance of LanguageModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LanguageModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ShortCode == input.ShortCode ||
                    (this.ShortCode != null &&
                    this.ShortCode.Equals(input.ShortCode))
                ) && 
                (
                    this.LanguageGroupCode == input.LanguageGroupCode ||
                    (this.LanguageGroupCode != null &&
                    this.LanguageGroupCode.Equals(input.LanguageGroupCode))
                ) && 
                (
                    this.RegionCode == input.RegionCode ||
                    (this.RegionCode != null &&
                    this.RegionCode.Equals(input.RegionCode))
                ) && 
                (
                    this.SupportedPlatforms == input.SupportedPlatforms ||
                    (this.SupportedPlatforms != null &&
                    this.SupportedPlatforms.Equals(input.SupportedPlatforms))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ShortCode != null)
                    hashCode = hashCode * 59 + this.ShortCode.GetHashCode();
                if (this.LanguageGroupCode != null)
                    hashCode = hashCode * 59 + this.LanguageGroupCode.GetHashCode();
                if (this.RegionCode != null)
                    hashCode = hashCode * 59 + this.RegionCode.GetHashCode();
                if (this.SupportedPlatforms != null)
                    hashCode = hashCode * 59 + this.SupportedPlatforms.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

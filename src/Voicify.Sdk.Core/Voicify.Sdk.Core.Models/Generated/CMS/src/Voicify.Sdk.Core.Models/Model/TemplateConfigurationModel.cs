/* 
 * Voicify CMS API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace Voicify.Sdk.Core.Models.Model
{
    /// <summary>
    /// TemplateConfigurationModel
    /// </summary>
    [DataContract]
        public partial class TemplateConfigurationModel :  IEquatable<TemplateConfigurationModel>
    {
        /// <summary>
        /// Gets or Sets TemplateType
        /// </summary>
        [DataMember(Name="templateType", EmitDefaultValue=false)]
        public TemplateType? TemplateType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TemplateConfigurationModel" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="createdDate">createdDate.</param>
        /// <param name="modifiedDate">modifiedDate.</param>
        /// <param name="templateApplicationId">templateApplicationId.</param>
        /// <param name="templateFormId">templateFormId.</param>
        /// <param name="isPublic">isPublic.</param>
        /// <param name="isDisabled">isDisabled.</param>
        /// <param name="name">name (required).</param>
        /// <param name="description">description (required).</param>
        /// <param name="imageUrl">imageUrl.</param>
        /// <param name="templateType">templateType.</param>
        /// <param name="ownerName">ownerName.</param>
        /// <param name="requiresCustomization">requiresCustomization.</param>
        /// <param name="shortDescription">shortDescription.</param>
        /// <param name="organizationId">organizationId (required).</param>
        /// <param name="dynamicFormUrl">dynamicFormUrl.</param>
        /// <param name="finalizeFormUrl">finalizeFormUrl.</param>
        /// <param name="templateForm">templateForm.</param>
        /// <param name="templateApplication">templateApplication.</param>
        /// <param name="images">images.</param>
        /// <param name="currentVersion">currentVersion (required).</param>
        /// <param name="categories">categories.</param>
        /// <param name="industries">industries.</param>
        public TemplateConfigurationModel(string id = default(string), DateTime? createdDate = default(DateTime?), DateTime? modifiedDate = default(DateTime?), string templateApplicationId = default(string), string templateFormId = default(string), bool? isPublic = default(bool?), bool? isDisabled = default(bool?), string name = default(string), string description = default(string), string imageUrl = default(string), TemplateType? templateType = default(TemplateType?), string ownerName = default(string), bool? requiresCustomization = default(bool?), string shortDescription = default(string), string organizationId = default(string), string dynamicFormUrl = default(string), string finalizeFormUrl = default(string), TemplateFormModel templateForm = default(TemplateFormModel), ApplicationModel templateApplication = default(ApplicationModel), List<TemplateConfigurationImageModel> images = default(List<TemplateConfigurationImageModel>), TemplateConfigurationVersionModel currentVersion = default(TemplateConfigurationVersionModel), List<TemplateCategoryModel> categories = default(List<TemplateCategoryModel>), List<TemplateIndustryModel> industries = default(List<TemplateIndustryModel>))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for TemplateConfigurationModel and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new InvalidDataException("description is a required property for TemplateConfigurationModel and cannot be null");
            }
            else
            {
                this.Description = description;
            }
            // to ensure "organizationId" is required (not null)
            if (organizationId == null)
            {
                throw new InvalidDataException("organizationId is a required property for TemplateConfigurationModel and cannot be null");
            }
            else
            {
                this.OrganizationId = organizationId;
            }
            // to ensure "currentVersion" is required (not null)
            if (currentVersion == null)
            {
                throw new InvalidDataException("currentVersion is a required property for TemplateConfigurationModel and cannot be null");
            }
            else
            {
                this.CurrentVersion = currentVersion;
            }
            this.Id = id;
            this.CreatedDate = createdDate;
            this.ModifiedDate = modifiedDate;
            this.TemplateApplicationId = templateApplicationId;
            this.TemplateFormId = templateFormId;
            this.IsPublic = isPublic;
            this.IsDisabled = isDisabled;
            this.ImageUrl = imageUrl;
            this.TemplateType = templateType;
            this.OwnerName = ownerName;
            this.RequiresCustomization = requiresCustomization;
            this.ShortDescription = shortDescription;
            this.DynamicFormUrl = dynamicFormUrl;
            this.FinalizeFormUrl = finalizeFormUrl;
            this.TemplateForm = templateForm;
            this.TemplateApplication = templateApplication;
            this.Images = images;
            this.Categories = categories;
            this.Industries = industries;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets CreatedDate
        /// </summary>
        [DataMember(Name="createdDate", EmitDefaultValue=false)]
        public DateTime? CreatedDate { get; set; }

        /// <summary>
        /// Gets or Sets ModifiedDate
        /// </summary>
        [DataMember(Name="modifiedDate", EmitDefaultValue=false)]
        public DateTime? ModifiedDate { get; set; }

        /// <summary>
        /// Gets or Sets TemplateApplicationId
        /// </summary>
        [DataMember(Name="templateApplicationId", EmitDefaultValue=false)]
        public string TemplateApplicationId { get; set; }

        /// <summary>
        /// Gets or Sets TemplateFormId
        /// </summary>
        [DataMember(Name="templateFormId", EmitDefaultValue=false)]
        public string TemplateFormId { get; set; }

        /// <summary>
        /// Gets or Sets IsPublic
        /// </summary>
        [DataMember(Name="isPublic", EmitDefaultValue=false)]
        public bool? IsPublic { get; set; }

        /// <summary>
        /// Gets or Sets IsDisabled
        /// </summary>
        [DataMember(Name="isDisabled", EmitDefaultValue=false)]
        public bool? IsDisabled { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets ImageUrl
        /// </summary>
        [DataMember(Name="imageUrl", EmitDefaultValue=false)]
        public string ImageUrl { get; set; }


        /// <summary>
        /// Gets or Sets OwnerName
        /// </summary>
        [DataMember(Name="ownerName", EmitDefaultValue=false)]
        public string OwnerName { get; set; }

        /// <summary>
        /// Gets or Sets RequiresCustomization
        /// </summary>
        [DataMember(Name="requiresCustomization", EmitDefaultValue=false)]
        public bool? RequiresCustomization { get; set; }

        /// <summary>
        /// Gets or Sets ShortDescription
        /// </summary>
        [DataMember(Name="shortDescription", EmitDefaultValue=false)]
        public string ShortDescription { get; set; }

        /// <summary>
        /// Gets or Sets OrganizationId
        /// </summary>
        [DataMember(Name="organizationId", EmitDefaultValue=false)]
        public string OrganizationId { get; set; }

        /// <summary>
        /// Gets or Sets DynamicFormUrl
        /// </summary>
        [DataMember(Name="dynamicFormUrl", EmitDefaultValue=false)]
        public string DynamicFormUrl { get; set; }

        /// <summary>
        /// Gets or Sets FinalizeFormUrl
        /// </summary>
        [DataMember(Name="finalizeFormUrl", EmitDefaultValue=false)]
        public string FinalizeFormUrl { get; set; }

        /// <summary>
        /// Gets or Sets TemplateForm
        /// </summary>
        [DataMember(Name="templateForm", EmitDefaultValue=false)]
        public TemplateFormModel TemplateForm { get; set; }

        /// <summary>
        /// Gets or Sets TemplateApplication
        /// </summary>
        [DataMember(Name="templateApplication", EmitDefaultValue=false)]
        public ApplicationModel TemplateApplication { get; set; }

        /// <summary>
        /// Gets or Sets Images
        /// </summary>
        [DataMember(Name="images", EmitDefaultValue=false)]
        public List<TemplateConfigurationImageModel> Images { get; set; }

        /// <summary>
        /// Gets or Sets CurrentVersion
        /// </summary>
        [DataMember(Name="currentVersion", EmitDefaultValue=false)]
        public TemplateConfigurationVersionModel CurrentVersion { get; set; }

        /// <summary>
        /// Gets or Sets Categories
        /// </summary>
        [DataMember(Name="categories", EmitDefaultValue=false)]
        public List<TemplateCategoryModel> Categories { get; set; }

        /// <summary>
        /// Gets or Sets Industries
        /// </summary>
        [DataMember(Name="industries", EmitDefaultValue=false)]
        public List<TemplateIndustryModel> Industries { get; set; }

        /// <summary>
        /// Gets or Sets Rating
        /// </summary>
        [DataMember(Name="rating", EmitDefaultValue=false)]
        public double? Rating { get; private set; }

        /// <summary>
        /// Gets or Sets ReviewCount
        /// </summary>
        [DataMember(Name="reviewCount", EmitDefaultValue=false)]
        public double? ReviewCount { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TemplateConfigurationModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  ModifiedDate: ").Append(ModifiedDate).Append("\n");
            sb.Append("  TemplateApplicationId: ").Append(TemplateApplicationId).Append("\n");
            sb.Append("  TemplateFormId: ").Append(TemplateFormId).Append("\n");
            sb.Append("  IsPublic: ").Append(IsPublic).Append("\n");
            sb.Append("  IsDisabled: ").Append(IsDisabled).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ImageUrl: ").Append(ImageUrl).Append("\n");
            sb.Append("  TemplateType: ").Append(TemplateType).Append("\n");
            sb.Append("  OwnerName: ").Append(OwnerName).Append("\n");
            sb.Append("  RequiresCustomization: ").Append(RequiresCustomization).Append("\n");
            sb.Append("  ShortDescription: ").Append(ShortDescription).Append("\n");
            sb.Append("  OrganizationId: ").Append(OrganizationId).Append("\n");
            sb.Append("  DynamicFormUrl: ").Append(DynamicFormUrl).Append("\n");
            sb.Append("  FinalizeFormUrl: ").Append(FinalizeFormUrl).Append("\n");
            sb.Append("  TemplateForm: ").Append(TemplateForm).Append("\n");
            sb.Append("  TemplateApplication: ").Append(TemplateApplication).Append("\n");
            sb.Append("  Images: ").Append(Images).Append("\n");
            sb.Append("  CurrentVersion: ").Append(CurrentVersion).Append("\n");
            sb.Append("  Categories: ").Append(Categories).Append("\n");
            sb.Append("  Industries: ").Append(Industries).Append("\n");
            sb.Append("  Rating: ").Append(Rating).Append("\n");
            sb.Append("  ReviewCount: ").Append(ReviewCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TemplateConfigurationModel);
        }

        /// <summary>
        /// Returns true if TemplateConfigurationModel instances are equal
        /// </summary>
        /// <param name="input">Instance of TemplateConfigurationModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TemplateConfigurationModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.CreatedDate == input.CreatedDate ||
                    (this.CreatedDate != null &&
                    this.CreatedDate.Equals(input.CreatedDate))
                ) && 
                (
                    this.ModifiedDate == input.ModifiedDate ||
                    (this.ModifiedDate != null &&
                    this.ModifiedDate.Equals(input.ModifiedDate))
                ) && 
                (
                    this.TemplateApplicationId == input.TemplateApplicationId ||
                    (this.TemplateApplicationId != null &&
                    this.TemplateApplicationId.Equals(input.TemplateApplicationId))
                ) && 
                (
                    this.TemplateFormId == input.TemplateFormId ||
                    (this.TemplateFormId != null &&
                    this.TemplateFormId.Equals(input.TemplateFormId))
                ) && 
                (
                    this.IsPublic == input.IsPublic ||
                    (this.IsPublic != null &&
                    this.IsPublic.Equals(input.IsPublic))
                ) && 
                (
                    this.IsDisabled == input.IsDisabled ||
                    (this.IsDisabled != null &&
                    this.IsDisabled.Equals(input.IsDisabled))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.ImageUrl == input.ImageUrl ||
                    (this.ImageUrl != null &&
                    this.ImageUrl.Equals(input.ImageUrl))
                ) && 
                (
                    this.TemplateType == input.TemplateType ||
                    (this.TemplateType != null &&
                    this.TemplateType.Equals(input.TemplateType))
                ) && 
                (
                    this.OwnerName == input.OwnerName ||
                    (this.OwnerName != null &&
                    this.OwnerName.Equals(input.OwnerName))
                ) && 
                (
                    this.RequiresCustomization == input.RequiresCustomization ||
                    (this.RequiresCustomization != null &&
                    this.RequiresCustomization.Equals(input.RequiresCustomization))
                ) && 
                (
                    this.ShortDescription == input.ShortDescription ||
                    (this.ShortDescription != null &&
                    this.ShortDescription.Equals(input.ShortDescription))
                ) && 
                (
                    this.OrganizationId == input.OrganizationId ||
                    (this.OrganizationId != null &&
                    this.OrganizationId.Equals(input.OrganizationId))
                ) && 
                (
                    this.DynamicFormUrl == input.DynamicFormUrl ||
                    (this.DynamicFormUrl != null &&
                    this.DynamicFormUrl.Equals(input.DynamicFormUrl))
                ) && 
                (
                    this.FinalizeFormUrl == input.FinalizeFormUrl ||
                    (this.FinalizeFormUrl != null &&
                    this.FinalizeFormUrl.Equals(input.FinalizeFormUrl))
                ) && 
                (
                    this.TemplateForm == input.TemplateForm ||
                    (this.TemplateForm != null &&
                    this.TemplateForm.Equals(input.TemplateForm))
                ) && 
                (
                    this.TemplateApplication == input.TemplateApplication ||
                    (this.TemplateApplication != null &&
                    this.TemplateApplication.Equals(input.TemplateApplication))
                ) && 
                (
                    this.Images == input.Images ||
                    this.Images != null &&
                    input.Images != null &&
                    this.Images.SequenceEqual(input.Images)
                ) && 
                (
                    this.CurrentVersion == input.CurrentVersion ||
                    (this.CurrentVersion != null &&
                    this.CurrentVersion.Equals(input.CurrentVersion))
                ) && 
                (
                    this.Categories == input.Categories ||
                    this.Categories != null &&
                    input.Categories != null &&
                    this.Categories.SequenceEqual(input.Categories)
                ) && 
                (
                    this.Industries == input.Industries ||
                    this.Industries != null &&
                    input.Industries != null &&
                    this.Industries.SequenceEqual(input.Industries)
                ) && 
                (
                    this.Rating == input.Rating ||
                    (this.Rating != null &&
                    this.Rating.Equals(input.Rating))
                ) && 
                (
                    this.ReviewCount == input.ReviewCount ||
                    (this.ReviewCount != null &&
                    this.ReviewCount.Equals(input.ReviewCount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.CreatedDate != null)
                    hashCode = hashCode * 59 + this.CreatedDate.GetHashCode();
                if (this.ModifiedDate != null)
                    hashCode = hashCode * 59 + this.ModifiedDate.GetHashCode();
                if (this.TemplateApplicationId != null)
                    hashCode = hashCode * 59 + this.TemplateApplicationId.GetHashCode();
                if (this.TemplateFormId != null)
                    hashCode = hashCode * 59 + this.TemplateFormId.GetHashCode();
                if (this.IsPublic != null)
                    hashCode = hashCode * 59 + this.IsPublic.GetHashCode();
                if (this.IsDisabled != null)
                    hashCode = hashCode * 59 + this.IsDisabled.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.ImageUrl != null)
                    hashCode = hashCode * 59 + this.ImageUrl.GetHashCode();
                if (this.TemplateType != null)
                    hashCode = hashCode * 59 + this.TemplateType.GetHashCode();
                if (this.OwnerName != null)
                    hashCode = hashCode * 59 + this.OwnerName.GetHashCode();
                if (this.RequiresCustomization != null)
                    hashCode = hashCode * 59 + this.RequiresCustomization.GetHashCode();
                if (this.ShortDescription != null)
                    hashCode = hashCode * 59 + this.ShortDescription.GetHashCode();
                if (this.OrganizationId != null)
                    hashCode = hashCode * 59 + this.OrganizationId.GetHashCode();
                if (this.DynamicFormUrl != null)
                    hashCode = hashCode * 59 + this.DynamicFormUrl.GetHashCode();
                if (this.FinalizeFormUrl != null)
                    hashCode = hashCode * 59 + this.FinalizeFormUrl.GetHashCode();
                if (this.TemplateForm != null)
                    hashCode = hashCode * 59 + this.TemplateForm.GetHashCode();
                if (this.TemplateApplication != null)
                    hashCode = hashCode * 59 + this.TemplateApplication.GetHashCode();
                if (this.Images != null)
                    hashCode = hashCode * 59 + this.Images.GetHashCode();
                if (this.CurrentVersion != null)
                    hashCode = hashCode * 59 + this.CurrentVersion.GetHashCode();
                if (this.Categories != null)
                    hashCode = hashCode * 59 + this.Categories.GetHashCode();
                if (this.Industries != null)
                    hashCode = hashCode * 59 + this.Industries.GetHashCode();
                if (this.Rating != null)
                    hashCode = hashCode * 59 + this.Rating.GetHashCode();
                if (this.ReviewCount != null)
                    hashCode = hashCode * 59 + this.ReviewCount.GetHashCode();
                return hashCode;
            }
        }

    }
}

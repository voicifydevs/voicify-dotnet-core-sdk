/* 
 * Voicify CMS API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace Voicify.Sdk.Core.Models.Model
{
    /// <summary>
    /// WebhookAttachmentModel
    /// </summary>
    [DataContract]
        public partial class WebhookAttachmentModel :  IEquatable<WebhookAttachmentModel>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebhookAttachmentModel" /> class.
        /// </summary>
        /// <param name="webhookId">webhookId.</param>
        /// <param name="applicationFeatureIds">applicationFeatureIds.</param>
        /// <param name="applicationIds">applicationIds.</param>
        /// <param name="customRequestIds">customRequestIds.</param>
        /// <param name="eventItemIds">eventItemIds.</param>
        /// <param name="exitMessageIds">exitMessageIds.</param>
        /// <param name="fallbackMessageIds">fallbackMessageIds.</param>
        /// <param name="helpMessageIds">helpMessageIds.</param>
        /// <param name="latestMessageIds">latestMessageIds.</param>
        /// <param name="numberRangeIds">numberRangeIds.</param>
        /// <param name="questionAnswerIds">questionAnswerIds.</param>
        /// <param name="recipeIds">recipeIds.</param>
        /// <param name="simpleChoiceIds">simpleChoiceIds.</param>
        /// <param name="welcomeMessageIds">welcomeMessageIds.</param>
        public WebhookAttachmentModel(string webhookId = default(string), List<string> applicationFeatureIds = default(List<string>), List<string> applicationIds = default(List<string>), List<string> customRequestIds = default(List<string>), List<string> eventItemIds = default(List<string>), List<string> exitMessageIds = default(List<string>), List<string> fallbackMessageIds = default(List<string>), List<string> helpMessageIds = default(List<string>), List<string> latestMessageIds = default(List<string>), List<string> numberRangeIds = default(List<string>), List<string> questionAnswerIds = default(List<string>), List<string> recipeIds = default(List<string>), List<string> simpleChoiceIds = default(List<string>), List<string> welcomeMessageIds = default(List<string>))
        {
            this.WebhookId = webhookId;
            this.ApplicationFeatureIds = applicationFeatureIds;
            this.ApplicationIds = applicationIds;
            this.CustomRequestIds = customRequestIds;
            this.EventItemIds = eventItemIds;
            this.ExitMessageIds = exitMessageIds;
            this.FallbackMessageIds = fallbackMessageIds;
            this.HelpMessageIds = helpMessageIds;
            this.LatestMessageIds = latestMessageIds;
            this.NumberRangeIds = numberRangeIds;
            this.QuestionAnswerIds = questionAnswerIds;
            this.RecipeIds = recipeIds;
            this.SimpleChoiceIds = simpleChoiceIds;
            this.WelcomeMessageIds = welcomeMessageIds;
        }
        
        /// <summary>
        /// Gets or Sets WebhookId
        /// </summary>
        [DataMember(Name="webhookId", EmitDefaultValue=false)]
        public string WebhookId { get; set; }

        /// <summary>
        /// Gets or Sets ApplicationFeatureIds
        /// </summary>
        [DataMember(Name="applicationFeatureIds", EmitDefaultValue=false)]
        public List<string> ApplicationFeatureIds { get; set; }

        /// <summary>
        /// Gets or Sets ApplicationIds
        /// </summary>
        [DataMember(Name="applicationIds", EmitDefaultValue=false)]
        public List<string> ApplicationIds { get; set; }

        /// <summary>
        /// Gets or Sets CustomRequestIds
        /// </summary>
        [DataMember(Name="customRequestIds", EmitDefaultValue=false)]
        public List<string> CustomRequestIds { get; set; }

        /// <summary>
        /// Gets or Sets EventItemIds
        /// </summary>
        [DataMember(Name="eventItemIds", EmitDefaultValue=false)]
        public List<string> EventItemIds { get; set; }

        /// <summary>
        /// Gets or Sets ExitMessageIds
        /// </summary>
        [DataMember(Name="exitMessageIds", EmitDefaultValue=false)]
        public List<string> ExitMessageIds { get; set; }

        /// <summary>
        /// Gets or Sets FallbackMessageIds
        /// </summary>
        [DataMember(Name="fallbackMessageIds", EmitDefaultValue=false)]
        public List<string> FallbackMessageIds { get; set; }

        /// <summary>
        /// Gets or Sets HelpMessageIds
        /// </summary>
        [DataMember(Name="helpMessageIds", EmitDefaultValue=false)]
        public List<string> HelpMessageIds { get; set; }

        /// <summary>
        /// Gets or Sets LatestMessageIds
        /// </summary>
        [DataMember(Name="latestMessageIds", EmitDefaultValue=false)]
        public List<string> LatestMessageIds { get; set; }

        /// <summary>
        /// Gets or Sets NumberRangeIds
        /// </summary>
        [DataMember(Name="numberRangeIds", EmitDefaultValue=false)]
        public List<string> NumberRangeIds { get; set; }

        /// <summary>
        /// Gets or Sets QuestionAnswerIds
        /// </summary>
        [DataMember(Name="questionAnswerIds", EmitDefaultValue=false)]
        public List<string> QuestionAnswerIds { get; set; }

        /// <summary>
        /// Gets or Sets RecipeIds
        /// </summary>
        [DataMember(Name="recipeIds", EmitDefaultValue=false)]
        public List<string> RecipeIds { get; set; }

        /// <summary>
        /// Gets or Sets SimpleChoiceIds
        /// </summary>
        [DataMember(Name="simpleChoiceIds", EmitDefaultValue=false)]
        public List<string> SimpleChoiceIds { get; set; }

        /// <summary>
        /// Gets or Sets WelcomeMessageIds
        /// </summary>
        [DataMember(Name="welcomeMessageIds", EmitDefaultValue=false)]
        public List<string> WelcomeMessageIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WebhookAttachmentModel {\n");
            sb.Append("  WebhookId: ").Append(WebhookId).Append("\n");
            sb.Append("  ApplicationFeatureIds: ").Append(ApplicationFeatureIds).Append("\n");
            sb.Append("  ApplicationIds: ").Append(ApplicationIds).Append("\n");
            sb.Append("  CustomRequestIds: ").Append(CustomRequestIds).Append("\n");
            sb.Append("  EventItemIds: ").Append(EventItemIds).Append("\n");
            sb.Append("  ExitMessageIds: ").Append(ExitMessageIds).Append("\n");
            sb.Append("  FallbackMessageIds: ").Append(FallbackMessageIds).Append("\n");
            sb.Append("  HelpMessageIds: ").Append(HelpMessageIds).Append("\n");
            sb.Append("  LatestMessageIds: ").Append(LatestMessageIds).Append("\n");
            sb.Append("  NumberRangeIds: ").Append(NumberRangeIds).Append("\n");
            sb.Append("  QuestionAnswerIds: ").Append(QuestionAnswerIds).Append("\n");
            sb.Append("  RecipeIds: ").Append(RecipeIds).Append("\n");
            sb.Append("  SimpleChoiceIds: ").Append(SimpleChoiceIds).Append("\n");
            sb.Append("  WelcomeMessageIds: ").Append(WelcomeMessageIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WebhookAttachmentModel);
        }

        /// <summary>
        /// Returns true if WebhookAttachmentModel instances are equal
        /// </summary>
        /// <param name="input">Instance of WebhookAttachmentModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WebhookAttachmentModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.WebhookId == input.WebhookId ||
                    (this.WebhookId != null &&
                    this.WebhookId.Equals(input.WebhookId))
                ) && 
                (
                    this.ApplicationFeatureIds == input.ApplicationFeatureIds ||
                    this.ApplicationFeatureIds != null &&
                    input.ApplicationFeatureIds != null &&
                    this.ApplicationFeatureIds.SequenceEqual(input.ApplicationFeatureIds)
                ) && 
                (
                    this.ApplicationIds == input.ApplicationIds ||
                    this.ApplicationIds != null &&
                    input.ApplicationIds != null &&
                    this.ApplicationIds.SequenceEqual(input.ApplicationIds)
                ) && 
                (
                    this.CustomRequestIds == input.CustomRequestIds ||
                    this.CustomRequestIds != null &&
                    input.CustomRequestIds != null &&
                    this.CustomRequestIds.SequenceEqual(input.CustomRequestIds)
                ) && 
                (
                    this.EventItemIds == input.EventItemIds ||
                    this.EventItemIds != null &&
                    input.EventItemIds != null &&
                    this.EventItemIds.SequenceEqual(input.EventItemIds)
                ) && 
                (
                    this.ExitMessageIds == input.ExitMessageIds ||
                    this.ExitMessageIds != null &&
                    input.ExitMessageIds != null &&
                    this.ExitMessageIds.SequenceEqual(input.ExitMessageIds)
                ) && 
                (
                    this.FallbackMessageIds == input.FallbackMessageIds ||
                    this.FallbackMessageIds != null &&
                    input.FallbackMessageIds != null &&
                    this.FallbackMessageIds.SequenceEqual(input.FallbackMessageIds)
                ) && 
                (
                    this.HelpMessageIds == input.HelpMessageIds ||
                    this.HelpMessageIds != null &&
                    input.HelpMessageIds != null &&
                    this.HelpMessageIds.SequenceEqual(input.HelpMessageIds)
                ) && 
                (
                    this.LatestMessageIds == input.LatestMessageIds ||
                    this.LatestMessageIds != null &&
                    input.LatestMessageIds != null &&
                    this.LatestMessageIds.SequenceEqual(input.LatestMessageIds)
                ) && 
                (
                    this.NumberRangeIds == input.NumberRangeIds ||
                    this.NumberRangeIds != null &&
                    input.NumberRangeIds != null &&
                    this.NumberRangeIds.SequenceEqual(input.NumberRangeIds)
                ) && 
                (
                    this.QuestionAnswerIds == input.QuestionAnswerIds ||
                    this.QuestionAnswerIds != null &&
                    input.QuestionAnswerIds != null &&
                    this.QuestionAnswerIds.SequenceEqual(input.QuestionAnswerIds)
                ) && 
                (
                    this.RecipeIds == input.RecipeIds ||
                    this.RecipeIds != null &&
                    input.RecipeIds != null &&
                    this.RecipeIds.SequenceEqual(input.RecipeIds)
                ) && 
                (
                    this.SimpleChoiceIds == input.SimpleChoiceIds ||
                    this.SimpleChoiceIds != null &&
                    input.SimpleChoiceIds != null &&
                    this.SimpleChoiceIds.SequenceEqual(input.SimpleChoiceIds)
                ) && 
                (
                    this.WelcomeMessageIds == input.WelcomeMessageIds ||
                    this.WelcomeMessageIds != null &&
                    input.WelcomeMessageIds != null &&
                    this.WelcomeMessageIds.SequenceEqual(input.WelcomeMessageIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.WebhookId != null)
                    hashCode = hashCode * 59 + this.WebhookId.GetHashCode();
                if (this.ApplicationFeatureIds != null)
                    hashCode = hashCode * 59 + this.ApplicationFeatureIds.GetHashCode();
                if (this.ApplicationIds != null)
                    hashCode = hashCode * 59 + this.ApplicationIds.GetHashCode();
                if (this.CustomRequestIds != null)
                    hashCode = hashCode * 59 + this.CustomRequestIds.GetHashCode();
                if (this.EventItemIds != null)
                    hashCode = hashCode * 59 + this.EventItemIds.GetHashCode();
                if (this.ExitMessageIds != null)
                    hashCode = hashCode * 59 + this.ExitMessageIds.GetHashCode();
                if (this.FallbackMessageIds != null)
                    hashCode = hashCode * 59 + this.FallbackMessageIds.GetHashCode();
                if (this.HelpMessageIds != null)
                    hashCode = hashCode * 59 + this.HelpMessageIds.GetHashCode();
                if (this.LatestMessageIds != null)
                    hashCode = hashCode * 59 + this.LatestMessageIds.GetHashCode();
                if (this.NumberRangeIds != null)
                    hashCode = hashCode * 59 + this.NumberRangeIds.GetHashCode();
                if (this.QuestionAnswerIds != null)
                    hashCode = hashCode * 59 + this.QuestionAnswerIds.GetHashCode();
                if (this.RecipeIds != null)
                    hashCode = hashCode * 59 + this.RecipeIds.GetHashCode();
                if (this.SimpleChoiceIds != null)
                    hashCode = hashCode * 59 + this.SimpleChoiceIds.GetHashCode();
                if (this.WelcomeMessageIds != null)
                    hashCode = hashCode * 59 + this.WelcomeMessageIds.GetHashCode();
                return hashCode;
            }
        }

    }
}

/* 
 * Voicify CMS API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace Voicify.Sdk.Core.Models.Model
{
    /// <summary>
    /// DynamicFormResponse
    /// </summary>
    [DataContract]
        public partial class DynamicFormResponse :  IEquatable<DynamicFormResponse>
    {
        /// <summary>
        /// Gets or Sets ResponseType
        /// </summary>
        [DataMember(Name="responseType", EmitDefaultValue=false)]
        public DynamicFormResponseType? ResponseType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DynamicFormResponse" /> class.
        /// </summary>
        /// <param name="formSection">formSection.</param>
        /// <param name="validation">validation.</param>
        /// <param name="oauthUrl">oauthUrl.</param>
        /// <param name="responseType">responseType.</param>
        public DynamicFormResponse(DynamicFormSectionModel formSection = default(DynamicFormSectionModel), List<DynamicFormValidation> validation = default(List<DynamicFormValidation>), string oauthUrl = default(string), DynamicFormResponseType? responseType = default(DynamicFormResponseType?))
        {
            this.FormSection = formSection;
            this.Validation = validation;
            this.OauthUrl = oauthUrl;
            this.ResponseType = responseType;
        }
        
        /// <summary>
        /// Gets or Sets FormSection
        /// </summary>
        [DataMember(Name="formSection", EmitDefaultValue=false)]
        public DynamicFormSectionModel FormSection { get; set; }

        /// <summary>
        /// Gets or Sets Validation
        /// </summary>
        [DataMember(Name="validation", EmitDefaultValue=false)]
        public List<DynamicFormValidation> Validation { get; set; }

        /// <summary>
        /// Gets or Sets OauthUrl
        /// </summary>
        [DataMember(Name="oauthUrl", EmitDefaultValue=false)]
        public string OauthUrl { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DynamicFormResponse {\n");
            sb.Append("  FormSection: ").Append(FormSection).Append("\n");
            sb.Append("  Validation: ").Append(Validation).Append("\n");
            sb.Append("  OauthUrl: ").Append(OauthUrl).Append("\n");
            sb.Append("  ResponseType: ").Append(ResponseType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DynamicFormResponse);
        }

        /// <summary>
        /// Returns true if DynamicFormResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of DynamicFormResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DynamicFormResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FormSection == input.FormSection ||
                    (this.FormSection != null &&
                    this.FormSection.Equals(input.FormSection))
                ) && 
                (
                    this.Validation == input.Validation ||
                    this.Validation != null &&
                    input.Validation != null &&
                    this.Validation.SequenceEqual(input.Validation)
                ) && 
                (
                    this.OauthUrl == input.OauthUrl ||
                    (this.OauthUrl != null &&
                    this.OauthUrl.Equals(input.OauthUrl))
                ) && 
                (
                    this.ResponseType == input.ResponseType ||
                    (this.ResponseType != null &&
                    this.ResponseType.Equals(input.ResponseType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FormSection != null)
                    hashCode = hashCode * 59 + this.FormSection.GetHashCode();
                if (this.Validation != null)
                    hashCode = hashCode * 59 + this.Validation.GetHashCode();
                if (this.OauthUrl != null)
                    hashCode = hashCode * 59 + this.OauthUrl.GetHashCode();
                if (this.ResponseType != null)
                    hashCode = hashCode * 59 + this.ResponseType.GetHashCode();
                return hashCode;
            }
        }

    }
}

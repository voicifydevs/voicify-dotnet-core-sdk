/* 
 * Voicify CMS API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace Voicify.Sdk.Core.Models.Model
{
    /// <summary>
    /// DynamicFormValidation
    /// </summary>
    [DataContract]
        public partial class DynamicFormValidation :  IEquatable<DynamicFormValidation>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DynamicFormValidation" /> class.
        /// </summary>
        /// <param name="templateFormFieldId">templateFormFieldId.</param>
        /// <param name="dynamicFormFieldName">dynamicFormFieldName.</param>
        /// <param name="message">message.</param>
        public DynamicFormValidation(string templateFormFieldId = default(string), string dynamicFormFieldName = default(string), string message = default(string))
        {
            this.TemplateFormFieldId = templateFormFieldId;
            this.DynamicFormFieldName = dynamicFormFieldName;
            this.Message = message;
        }
        
        /// <summary>
        /// Gets or Sets TemplateFormFieldId
        /// </summary>
        [DataMember(Name="templateFormFieldId", EmitDefaultValue=false)]
        public string TemplateFormFieldId { get; set; }

        /// <summary>
        /// Gets or Sets DynamicFormFieldName
        /// </summary>
        [DataMember(Name="dynamicFormFieldName", EmitDefaultValue=false)]
        public string DynamicFormFieldName { get; set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string Message { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DynamicFormValidation {\n");
            sb.Append("  TemplateFormFieldId: ").Append(TemplateFormFieldId).Append("\n");
            sb.Append("  DynamicFormFieldName: ").Append(DynamicFormFieldName).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DynamicFormValidation);
        }

        /// <summary>
        /// Returns true if DynamicFormValidation instances are equal
        /// </summary>
        /// <param name="input">Instance of DynamicFormValidation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DynamicFormValidation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TemplateFormFieldId == input.TemplateFormFieldId ||
                    (this.TemplateFormFieldId != null &&
                    this.TemplateFormFieldId.Equals(input.TemplateFormFieldId))
                ) && 
                (
                    this.DynamicFormFieldName == input.DynamicFormFieldName ||
                    (this.DynamicFormFieldName != null &&
                    this.DynamicFormFieldName.Equals(input.DynamicFormFieldName))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TemplateFormFieldId != null)
                    hashCode = hashCode * 59 + this.TemplateFormFieldId.GetHashCode();
                if (this.DynamicFormFieldName != null)
                    hashCode = hashCode * 59 + this.DynamicFormFieldName.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                return hashCode;
            }
        }

    }
}

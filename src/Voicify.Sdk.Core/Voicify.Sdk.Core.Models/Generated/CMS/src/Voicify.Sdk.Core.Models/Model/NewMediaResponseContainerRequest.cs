/* 
 * Voicify CMS API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace Voicify.Sdk.Core.Models.Model
{
    /// <summary>
    /// NewMediaResponseContainerRequest
    /// </summary>
    [DataContract]
    public partial class NewMediaResponseContainerRequest :  IEquatable<NewMediaResponseContainerRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NewMediaResponseContainerRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected NewMediaResponseContainerRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="NewMediaResponseContainerRequest" /> class.
        /// </summary>
        /// <param name="applicationId">applicationId (required).</param>
        /// <param name="additionalMediaItemIds">additionalMediaItemIds (required).</param>
        /// <param name="responseIds">responseIds (required).</param>
        public NewMediaResponseContainerRequest(string applicationId = default(string), List<string> additionalMediaItemIds = default(List<string>), List<string> responseIds = default(List<string>))
        {
            // to ensure "applicationId" is required (not null)
            if (applicationId == null)
            {
                throw new InvalidDataException("applicationId is a required property for NewMediaResponseContainerRequest and cannot be null");
            }
            else
            {
                this.ApplicationId = applicationId;
            }
            // to ensure "additionalMediaItemIds" is required (not null)
            if (additionalMediaItemIds == null)
            {
                throw new InvalidDataException("additionalMediaItemIds is a required property for NewMediaResponseContainerRequest and cannot be null");
            }
            else
            {
                this.AdditionalMediaItemIds = additionalMediaItemIds;
            }
            // to ensure "responseIds" is required (not null)
            if (responseIds == null)
            {
                throw new InvalidDataException("responseIds is a required property for NewMediaResponseContainerRequest and cannot be null");
            }
            else
            {
                this.ResponseIds = responseIds;
            }
        }
        
        /// <summary>
        /// Gets or Sets ApplicationId
        /// </summary>
        [DataMember(Name="applicationId", EmitDefaultValue=false)]
        public string ApplicationId { get; set; }

        /// <summary>
        /// Gets or Sets AdditionalMediaItemIds
        /// </summary>
        [DataMember(Name="additionalMediaItemIds", EmitDefaultValue=false)]
        public List<string> AdditionalMediaItemIds { get; set; }

        /// <summary>
        /// Gets or Sets ResponseIds
        /// </summary>
        [DataMember(Name="responseIds", EmitDefaultValue=false)]
        public List<string> ResponseIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NewMediaResponseContainerRequest {\n");
            sb.Append("  ApplicationId: ").Append(ApplicationId).Append("\n");
            sb.Append("  AdditionalMediaItemIds: ").Append(AdditionalMediaItemIds).Append("\n");
            sb.Append("  ResponseIds: ").Append(ResponseIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NewMediaResponseContainerRequest);
        }

        /// <summary>
        /// Returns true if NewMediaResponseContainerRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of NewMediaResponseContainerRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NewMediaResponseContainerRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ApplicationId == input.ApplicationId ||
                    (this.ApplicationId != null &&
                    this.ApplicationId.Equals(input.ApplicationId))
                ) && 
                (
                    this.AdditionalMediaItemIds == input.AdditionalMediaItemIds ||
                    this.AdditionalMediaItemIds != null &&
                    this.AdditionalMediaItemIds.SequenceEqual(input.AdditionalMediaItemIds)
                ) && 
                (
                    this.ResponseIds == input.ResponseIds ||
                    this.ResponseIds != null &&
                    this.ResponseIds.SequenceEqual(input.ResponseIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ApplicationId != null)
                    hashCode = hashCode * 59 + this.ApplicationId.GetHashCode();
                if (this.AdditionalMediaItemIds != null)
                    hashCode = hashCode * 59 + this.AdditionalMediaItemIds.GetHashCode();
                if (this.ResponseIds != null)
                    hashCode = hashCode * 59 + this.ResponseIds.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

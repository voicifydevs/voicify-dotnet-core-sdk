/* 
 * Voicify CMS API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace Voicify.Sdk.Core.Models.Model
{
    /// <summary>
    /// ResponseFlagRuleModel
    /// </summary>
    [DataContract]
        public partial class ResponseFlagRuleModel :  IEquatable<ResponseFlagRuleModel>
    {
        /// <summary>
        /// Gets or Sets RuleType
        /// </summary>
        [DataMember(Name="ruleType", EmitDefaultValue=false)]
        public ResponseFlagRuleType? RuleType { get; set; }
        /// <summary>
        /// Gets or Sets FlagScope
        /// </summary>
        [DataMember(Name="flagScope", EmitDefaultValue=false)]
        public ResponseFlagScope? FlagScope { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ResponseFlagRuleModel" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="applicationConversationFlagId">applicationConversationFlagId.</param>
        /// <param name="ruleType">ruleType.</param>
        /// <param name="flagScope">flagScope.</param>
        /// <param name="applicationConversationFlag">applicationConversationFlag (required).</param>
        public ResponseFlagRuleModel(string id = default(string), string applicationConversationFlagId = default(string), ResponseFlagRuleType? ruleType = default(ResponseFlagRuleType?), ResponseFlagScope? flagScope = default(ResponseFlagScope?), ApplicationConversationFlagModel applicationConversationFlag = default(ApplicationConversationFlagModel))
        {
            // to ensure "applicationConversationFlag" is required (not null)
            if (applicationConversationFlag == null)
            {
                throw new InvalidDataException("applicationConversationFlag is a required property for ResponseFlagRuleModel and cannot be null");
            }
            else
            {
                this.ApplicationConversationFlag = applicationConversationFlag;
            }
            this.Id = id;
            this.ApplicationConversationFlagId = applicationConversationFlagId;
            this.RuleType = ruleType;
            this.FlagScope = flagScope;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets ApplicationConversationFlagId
        /// </summary>
        [DataMember(Name="applicationConversationFlagId", EmitDefaultValue=false)]
        public string ApplicationConversationFlagId { get; set; }



        /// <summary>
        /// Gets or Sets ApplicationConversationFlag
        /// </summary>
        [DataMember(Name="applicationConversationFlag", EmitDefaultValue=false)]
        public ApplicationConversationFlagModel ApplicationConversationFlag { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ResponseFlagRuleModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ApplicationConversationFlagId: ").Append(ApplicationConversationFlagId).Append("\n");
            sb.Append("  RuleType: ").Append(RuleType).Append("\n");
            sb.Append("  FlagScope: ").Append(FlagScope).Append("\n");
            sb.Append("  ApplicationConversationFlag: ").Append(ApplicationConversationFlag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ResponseFlagRuleModel);
        }

        /// <summary>
        /// Returns true if ResponseFlagRuleModel instances are equal
        /// </summary>
        /// <param name="input">Instance of ResponseFlagRuleModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ResponseFlagRuleModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ApplicationConversationFlagId == input.ApplicationConversationFlagId ||
                    (this.ApplicationConversationFlagId != null &&
                    this.ApplicationConversationFlagId.Equals(input.ApplicationConversationFlagId))
                ) && 
                (
                    this.RuleType == input.RuleType ||
                    (this.RuleType != null &&
                    this.RuleType.Equals(input.RuleType))
                ) && 
                (
                    this.FlagScope == input.FlagScope ||
                    (this.FlagScope != null &&
                    this.FlagScope.Equals(input.FlagScope))
                ) && 
                (
                    this.ApplicationConversationFlag == input.ApplicationConversationFlag ||
                    (this.ApplicationConversationFlag != null &&
                    this.ApplicationConversationFlag.Equals(input.ApplicationConversationFlag))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ApplicationConversationFlagId != null)
                    hashCode = hashCode * 59 + this.ApplicationConversationFlagId.GetHashCode();
                if (this.RuleType != null)
                    hashCode = hashCode * 59 + this.RuleType.GetHashCode();
                if (this.FlagScope != null)
                    hashCode = hashCode * 59 + this.FlagScope.GetHashCode();
                if (this.ApplicationConversationFlag != null)
                    hashCode = hashCode * 59 + this.ApplicationConversationFlag.GetHashCode();
                return hashCode;
            }
        }

    }
}

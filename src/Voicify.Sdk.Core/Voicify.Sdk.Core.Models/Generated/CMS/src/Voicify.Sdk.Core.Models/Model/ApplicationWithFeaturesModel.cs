/* 
 * Voicify CMS API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace Voicify.Sdk.Core.Models.Model
{
    /// <summary>
    /// ApplicationWithFeaturesModel
    /// </summary>
    [DataContract]
        public partial class ApplicationWithFeaturesModel :  IEquatable<ApplicationWithFeaturesModel>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationWithFeaturesModel" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="name">name.</param>
        /// <param name="secret">secret.</param>
        /// <param name="imageUrl">imageUrl.</param>
        /// <param name="invocationPhrase">invocationPhrase.</param>
        /// <param name="description">description.</param>
        /// <param name="shortDescription">shortDescription.</param>
        /// <param name="keywords">keywords.</param>
        /// <param name="imageItemId">imageItemId.</param>
        /// <param name="defaultLanguageId">defaultLanguageId.</param>
        /// <param name="applicationFeatures">applicationFeatures.</param>
        /// <param name="languages">languages.</param>
        /// <param name="applicationInformationItems">applicationInformationItems.</param>
        /// <param name="regions">regions.</param>
        public ApplicationWithFeaturesModel(string id = default(string), string name = default(string), string secret = default(string), string imageUrl = default(string), string invocationPhrase = default(string), string description = default(string), string shortDescription = default(string), string keywords = default(string), string imageItemId = default(string), string defaultLanguageId = default(string), List<ApplicationFeatureModel> applicationFeatures = default(List<ApplicationFeatureModel>), List<LanguageModel> languages = default(List<LanguageModel>), List<ApplicationInformationModel> applicationInformationItems = default(List<ApplicationInformationModel>), List<VoicifyRegionModel> regions = default(List<VoicifyRegionModel>))
        {
            this.Id = id;
            this.Name = name;
            this.Secret = secret;
            this.ImageUrl = imageUrl;
            this.InvocationPhrase = invocationPhrase;
            this.Description = description;
            this.ShortDescription = shortDescription;
            this.Keywords = keywords;
            this.ImageItemId = imageItemId;
            this.DefaultLanguageId = defaultLanguageId;
            this.ApplicationFeatures = applicationFeatures;
            this.Languages = languages;
            this.ApplicationInformationItems = applicationInformationItems;
            this.Regions = regions;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Secret
        /// </summary>
        [DataMember(Name="secret", EmitDefaultValue=false)]
        public string Secret { get; set; }

        /// <summary>
        /// Gets or Sets ImageUrl
        /// </summary>
        [DataMember(Name="imageUrl", EmitDefaultValue=false)]
        public string ImageUrl { get; set; }

        /// <summary>
        /// Gets or Sets InvocationPhrase
        /// </summary>
        [DataMember(Name="invocationPhrase", EmitDefaultValue=false)]
        public string InvocationPhrase { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets ShortDescription
        /// </summary>
        [DataMember(Name="shortDescription", EmitDefaultValue=false)]
        public string ShortDescription { get; set; }

        /// <summary>
        /// Gets or Sets Keywords
        /// </summary>
        [DataMember(Name="keywords", EmitDefaultValue=false)]
        public string Keywords { get; set; }

        /// <summary>
        /// Gets or Sets ImageItemId
        /// </summary>
        [DataMember(Name="imageItemId", EmitDefaultValue=false)]
        public string ImageItemId { get; set; }

        /// <summary>
        /// Gets or Sets DefaultLanguageId
        /// </summary>
        [DataMember(Name="defaultLanguageId", EmitDefaultValue=false)]
        public string DefaultLanguageId { get; set; }

        /// <summary>
        /// Gets or Sets ApplicationFeatures
        /// </summary>
        [DataMember(Name="applicationFeatures", EmitDefaultValue=false)]
        public List<ApplicationFeatureModel> ApplicationFeatures { get; set; }

        /// <summary>
        /// Gets or Sets Languages
        /// </summary>
        [DataMember(Name="languages", EmitDefaultValue=false)]
        public List<LanguageModel> Languages { get; set; }

        /// <summary>
        /// Gets or Sets ApplicationInformationItems
        /// </summary>
        [DataMember(Name="applicationInformationItems", EmitDefaultValue=false)]
        public List<ApplicationInformationModel> ApplicationInformationItems { get; set; }

        /// <summary>
        /// Gets or Sets Regions
        /// </summary>
        [DataMember(Name="regions", EmitDefaultValue=false)]
        public List<VoicifyRegionModel> Regions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ApplicationWithFeaturesModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Secret: ").Append(Secret).Append("\n");
            sb.Append("  ImageUrl: ").Append(ImageUrl).Append("\n");
            sb.Append("  InvocationPhrase: ").Append(InvocationPhrase).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ShortDescription: ").Append(ShortDescription).Append("\n");
            sb.Append("  Keywords: ").Append(Keywords).Append("\n");
            sb.Append("  ImageItemId: ").Append(ImageItemId).Append("\n");
            sb.Append("  DefaultLanguageId: ").Append(DefaultLanguageId).Append("\n");
            sb.Append("  ApplicationFeatures: ").Append(ApplicationFeatures).Append("\n");
            sb.Append("  Languages: ").Append(Languages).Append("\n");
            sb.Append("  ApplicationInformationItems: ").Append(ApplicationInformationItems).Append("\n");
            sb.Append("  Regions: ").Append(Regions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ApplicationWithFeaturesModel);
        }

        /// <summary>
        /// Returns true if ApplicationWithFeaturesModel instances are equal
        /// </summary>
        /// <param name="input">Instance of ApplicationWithFeaturesModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApplicationWithFeaturesModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Secret == input.Secret ||
                    (this.Secret != null &&
                    this.Secret.Equals(input.Secret))
                ) && 
                (
                    this.ImageUrl == input.ImageUrl ||
                    (this.ImageUrl != null &&
                    this.ImageUrl.Equals(input.ImageUrl))
                ) && 
                (
                    this.InvocationPhrase == input.InvocationPhrase ||
                    (this.InvocationPhrase != null &&
                    this.InvocationPhrase.Equals(input.InvocationPhrase))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.ShortDescription == input.ShortDescription ||
                    (this.ShortDescription != null &&
                    this.ShortDescription.Equals(input.ShortDescription))
                ) && 
                (
                    this.Keywords == input.Keywords ||
                    (this.Keywords != null &&
                    this.Keywords.Equals(input.Keywords))
                ) && 
                (
                    this.ImageItemId == input.ImageItemId ||
                    (this.ImageItemId != null &&
                    this.ImageItemId.Equals(input.ImageItemId))
                ) && 
                (
                    this.DefaultLanguageId == input.DefaultLanguageId ||
                    (this.DefaultLanguageId != null &&
                    this.DefaultLanguageId.Equals(input.DefaultLanguageId))
                ) && 
                (
                    this.ApplicationFeatures == input.ApplicationFeatures ||
                    this.ApplicationFeatures != null &&
                    input.ApplicationFeatures != null &&
                    this.ApplicationFeatures.SequenceEqual(input.ApplicationFeatures)
                ) && 
                (
                    this.Languages == input.Languages ||
                    this.Languages != null &&
                    input.Languages != null &&
                    this.Languages.SequenceEqual(input.Languages)
                ) && 
                (
                    this.ApplicationInformationItems == input.ApplicationInformationItems ||
                    this.ApplicationInformationItems != null &&
                    input.ApplicationInformationItems != null &&
                    this.ApplicationInformationItems.SequenceEqual(input.ApplicationInformationItems)
                ) && 
                (
                    this.Regions == input.Regions ||
                    this.Regions != null &&
                    input.Regions != null &&
                    this.Regions.SequenceEqual(input.Regions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Secret != null)
                    hashCode = hashCode * 59 + this.Secret.GetHashCode();
                if (this.ImageUrl != null)
                    hashCode = hashCode * 59 + this.ImageUrl.GetHashCode();
                if (this.InvocationPhrase != null)
                    hashCode = hashCode * 59 + this.InvocationPhrase.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.ShortDescription != null)
                    hashCode = hashCode * 59 + this.ShortDescription.GetHashCode();
                if (this.Keywords != null)
                    hashCode = hashCode * 59 + this.Keywords.GetHashCode();
                if (this.ImageItemId != null)
                    hashCode = hashCode * 59 + this.ImageItemId.GetHashCode();
                if (this.DefaultLanguageId != null)
                    hashCode = hashCode * 59 + this.DefaultLanguageId.GetHashCode();
                if (this.ApplicationFeatures != null)
                    hashCode = hashCode * 59 + this.ApplicationFeatures.GetHashCode();
                if (this.Languages != null)
                    hashCode = hashCode * 59 + this.Languages.GetHashCode();
                if (this.ApplicationInformationItems != null)
                    hashCode = hashCode * 59 + this.ApplicationInformationItems.GetHashCode();
                if (this.Regions != null)
                    hashCode = hashCode * 59 + this.Regions.GetHashCode();
                return hashCode;
            }
        }

    }
}

/* 
 * Voicify CMS API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace Voicify.Sdk.Core.Models.Model
{
    /// <summary>
    /// UserVoicifyNotificationModel
    /// </summary>
    [DataContract]
        public partial class UserVoicifyNotificationModel :  IEquatable<UserVoicifyNotificationModel>
    {
        /// <summary>
        /// Gets or Sets Priority
        /// </summary>
        [DataMember(Name="priority", EmitDefaultValue=false)]
        public VoicifyNotificationPriority? Priority { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserVoicifyNotificationModel" /> class.
        /// </summary>
        /// <param name="isRead">isRead.</param>
        /// <param name="id">id.</param>
        /// <param name="title">title (required).</param>
        /// <param name="subtitle">subtitle (required).</param>
        /// <param name="markdown">markdown (required).</param>
        /// <param name="notificationType">notificationType (required).</param>
        /// <param name="isDisabled">isDisabled.</param>
        /// <param name="enforceRead">enforceRead.</param>
        /// <param name="isSystemWide">isSystemWide.</param>
        /// <param name="imageUrl">imageUrl.</param>
        /// <param name="expirationDate">expirationDate.</param>
        /// <param name="startDate">startDate.</param>
        /// <param name="priority">priority.</param>
        public UserVoicifyNotificationModel(bool? isRead = default(bool?), string id = default(string), string title = default(string), string subtitle = default(string), string markdown = default(string), string notificationType = default(string), bool? isDisabled = default(bool?), bool? enforceRead = default(bool?), bool? isSystemWide = default(bool?), string imageUrl = default(string), DateTime? expirationDate = default(DateTime?), DateTime? startDate = default(DateTime?), VoicifyNotificationPriority? priority = default(VoicifyNotificationPriority?))
        {
            // to ensure "title" is required (not null)
            if (title == null)
            {
                throw new InvalidDataException("title is a required property for UserVoicifyNotificationModel and cannot be null");
            }
            else
            {
                this.Title = title;
            }
            // to ensure "subtitle" is required (not null)
            if (subtitle == null)
            {
                throw new InvalidDataException("subtitle is a required property for UserVoicifyNotificationModel and cannot be null");
            }
            else
            {
                this.Subtitle = subtitle;
            }
            // to ensure "markdown" is required (not null)
            if (markdown == null)
            {
                throw new InvalidDataException("markdown is a required property for UserVoicifyNotificationModel and cannot be null");
            }
            else
            {
                this.Markdown = markdown;
            }
            // to ensure "notificationType" is required (not null)
            if (notificationType == null)
            {
                throw new InvalidDataException("notificationType is a required property for UserVoicifyNotificationModel and cannot be null");
            }
            else
            {
                this.NotificationType = notificationType;
            }
            this.IsRead = isRead;
            this.Id = id;
            this.IsDisabled = isDisabled;
            this.EnforceRead = enforceRead;
            this.IsSystemWide = isSystemWide;
            this.ImageUrl = imageUrl;
            this.ExpirationDate = expirationDate;
            this.StartDate = startDate;
            this.Priority = priority;
        }
        
        /// <summary>
        /// Gets or Sets IsRead
        /// </summary>
        [DataMember(Name="isRead", EmitDefaultValue=false)]
        public bool? IsRead { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets Subtitle
        /// </summary>
        [DataMember(Name="subtitle", EmitDefaultValue=false)]
        public string Subtitle { get; set; }

        /// <summary>
        /// Gets or Sets Markdown
        /// </summary>
        [DataMember(Name="markdown", EmitDefaultValue=false)]
        public string Markdown { get; set; }

        /// <summary>
        /// Gets or Sets NotificationType
        /// </summary>
        [DataMember(Name="notificationType", EmitDefaultValue=false)]
        public string NotificationType { get; set; }

        /// <summary>
        /// Gets or Sets IsDisabled
        /// </summary>
        [DataMember(Name="isDisabled", EmitDefaultValue=false)]
        public bool? IsDisabled { get; set; }

        /// <summary>
        /// Gets or Sets EnforceRead
        /// </summary>
        [DataMember(Name="enforceRead", EmitDefaultValue=false)]
        public bool? EnforceRead { get; set; }

        /// <summary>
        /// Gets or Sets IsSystemWide
        /// </summary>
        [DataMember(Name="isSystemWide", EmitDefaultValue=false)]
        public bool? IsSystemWide { get; set; }

        /// <summary>
        /// Gets or Sets ImageUrl
        /// </summary>
        [DataMember(Name="imageUrl", EmitDefaultValue=false)]
        public string ImageUrl { get; set; }

        /// <summary>
        /// Gets or Sets ExpirationDate
        /// </summary>
        [DataMember(Name="expirationDate", EmitDefaultValue=false)]
        public DateTime? ExpirationDate { get; set; }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [DataMember(Name="startDate", EmitDefaultValue=false)]
        public DateTime? StartDate { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserVoicifyNotificationModel {\n");
            sb.Append("  IsRead: ").Append(IsRead).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Subtitle: ").Append(Subtitle).Append("\n");
            sb.Append("  Markdown: ").Append(Markdown).Append("\n");
            sb.Append("  NotificationType: ").Append(NotificationType).Append("\n");
            sb.Append("  IsDisabled: ").Append(IsDisabled).Append("\n");
            sb.Append("  EnforceRead: ").Append(EnforceRead).Append("\n");
            sb.Append("  IsSystemWide: ").Append(IsSystemWide).Append("\n");
            sb.Append("  ImageUrl: ").Append(ImageUrl).Append("\n");
            sb.Append("  ExpirationDate: ").Append(ExpirationDate).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserVoicifyNotificationModel);
        }

        /// <summary>
        /// Returns true if UserVoicifyNotificationModel instances are equal
        /// </summary>
        /// <param name="input">Instance of UserVoicifyNotificationModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserVoicifyNotificationModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.IsRead == input.IsRead ||
                    (this.IsRead != null &&
                    this.IsRead.Equals(input.IsRead))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Subtitle == input.Subtitle ||
                    (this.Subtitle != null &&
                    this.Subtitle.Equals(input.Subtitle))
                ) && 
                (
                    this.Markdown == input.Markdown ||
                    (this.Markdown != null &&
                    this.Markdown.Equals(input.Markdown))
                ) && 
                (
                    this.NotificationType == input.NotificationType ||
                    (this.NotificationType != null &&
                    this.NotificationType.Equals(input.NotificationType))
                ) && 
                (
                    this.IsDisabled == input.IsDisabled ||
                    (this.IsDisabled != null &&
                    this.IsDisabled.Equals(input.IsDisabled))
                ) && 
                (
                    this.EnforceRead == input.EnforceRead ||
                    (this.EnforceRead != null &&
                    this.EnforceRead.Equals(input.EnforceRead))
                ) && 
                (
                    this.IsSystemWide == input.IsSystemWide ||
                    (this.IsSystemWide != null &&
                    this.IsSystemWide.Equals(input.IsSystemWide))
                ) && 
                (
                    this.ImageUrl == input.ImageUrl ||
                    (this.ImageUrl != null &&
                    this.ImageUrl.Equals(input.ImageUrl))
                ) && 
                (
                    this.ExpirationDate == input.ExpirationDate ||
                    (this.ExpirationDate != null &&
                    this.ExpirationDate.Equals(input.ExpirationDate))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.Priority == input.Priority ||
                    (this.Priority != null &&
                    this.Priority.Equals(input.Priority))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IsRead != null)
                    hashCode = hashCode * 59 + this.IsRead.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.Subtitle != null)
                    hashCode = hashCode * 59 + this.Subtitle.GetHashCode();
                if (this.Markdown != null)
                    hashCode = hashCode * 59 + this.Markdown.GetHashCode();
                if (this.NotificationType != null)
                    hashCode = hashCode * 59 + this.NotificationType.GetHashCode();
                if (this.IsDisabled != null)
                    hashCode = hashCode * 59 + this.IsDisabled.GetHashCode();
                if (this.EnforceRead != null)
                    hashCode = hashCode * 59 + this.EnforceRead.GetHashCode();
                if (this.IsSystemWide != null)
                    hashCode = hashCode * 59 + this.IsSystemWide.GetHashCode();
                if (this.ImageUrl != null)
                    hashCode = hashCode * 59 + this.ImageUrl.GetHashCode();
                if (this.ExpirationDate != null)
                    hashCode = hashCode * 59 + this.ExpirationDate.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.Priority != null)
                    hashCode = hashCode * 59 + this.Priority.GetHashCode();
                return hashCode;
            }
        }

    }
}

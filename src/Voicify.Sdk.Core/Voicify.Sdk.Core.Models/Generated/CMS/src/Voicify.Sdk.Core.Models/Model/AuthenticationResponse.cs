/* 
 * Voicify CMS API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace Voicify.Sdk.Core.Models.Model
{
    /// <summary>
    /// AuthenticationResponse
    /// </summary>
    [DataContract]
    public partial class AuthenticationResponse :  IEquatable<AuthenticationResponse>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationResponse" /> class.
        /// </summary>
        /// <param name="user">user.</param>
        /// <param name="accessToken">accessToken.</param>
        /// <param name="refreshToken">refreshToken.</param>
        /// <param name="accessTokenExpirationDate">accessTokenExpirationDate.</param>
        /// <param name="refreshTokenExpirationDate">refreshTokenExpirationDate.</param>
        public AuthenticationResponse(UserModel user = default(UserModel), string accessToken = default(string), string refreshToken = default(string), DateTime? accessTokenExpirationDate = default(DateTime?), DateTime? refreshTokenExpirationDate = default(DateTime?))
        {
            this.User = user;
            this.AccessToken = accessToken;
            this.RefreshToken = refreshToken;
            this.AccessTokenExpirationDate = accessTokenExpirationDate;
            this.RefreshTokenExpirationDate = refreshTokenExpirationDate;
        }
        
        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public UserModel User { get; set; }

        /// <summary>
        /// Gets or Sets AccessToken
        /// </summary>
        [DataMember(Name="accessToken", EmitDefaultValue=false)]
        public string AccessToken { get; set; }

        /// <summary>
        /// Gets or Sets RefreshToken
        /// </summary>
        [DataMember(Name="refreshToken", EmitDefaultValue=false)]
        public string RefreshToken { get; set; }

        /// <summary>
        /// Gets or Sets AccessTokenExpirationDate
        /// </summary>
        [DataMember(Name="accessTokenExpirationDate", EmitDefaultValue=false)]
        public DateTime? AccessTokenExpirationDate { get; set; }

        /// <summary>
        /// Gets or Sets RefreshTokenExpirationDate
        /// </summary>
        [DataMember(Name="refreshTokenExpirationDate", EmitDefaultValue=false)]
        public DateTime? RefreshTokenExpirationDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AuthenticationResponse {\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  AccessToken: ").Append(AccessToken).Append("\n");
            sb.Append("  RefreshToken: ").Append(RefreshToken).Append("\n");
            sb.Append("  AccessTokenExpirationDate: ").Append(AccessTokenExpirationDate).Append("\n");
            sb.Append("  RefreshTokenExpirationDate: ").Append(RefreshTokenExpirationDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AuthenticationResponse);
        }

        /// <summary>
        /// Returns true if AuthenticationResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of AuthenticationResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AuthenticationResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                ) && 
                (
                    this.AccessToken == input.AccessToken ||
                    (this.AccessToken != null &&
                    this.AccessToken.Equals(input.AccessToken))
                ) && 
                (
                    this.RefreshToken == input.RefreshToken ||
                    (this.RefreshToken != null &&
                    this.RefreshToken.Equals(input.RefreshToken))
                ) && 
                (
                    this.AccessTokenExpirationDate == input.AccessTokenExpirationDate ||
                    (this.AccessTokenExpirationDate != null &&
                    this.AccessTokenExpirationDate.Equals(input.AccessTokenExpirationDate))
                ) && 
                (
                    this.RefreshTokenExpirationDate == input.RefreshTokenExpirationDate ||
                    (this.RefreshTokenExpirationDate != null &&
                    this.RefreshTokenExpirationDate.Equals(input.RefreshTokenExpirationDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.User != null)
                    hashCode = hashCode * 59 + this.User.GetHashCode();
                if (this.AccessToken != null)
                    hashCode = hashCode * 59 + this.AccessToken.GetHashCode();
                if (this.RefreshToken != null)
                    hashCode = hashCode * 59 + this.RefreshToken.GetHashCode();
                if (this.AccessTokenExpirationDate != null)
                    hashCode = hashCode * 59 + this.AccessTokenExpirationDate.GetHashCode();
                if (this.RefreshTokenExpirationDate != null)
                    hashCode = hashCode * 59 + this.RefreshTokenExpirationDate.GetHashCode();
                return hashCode;
            }
        }

    }

}

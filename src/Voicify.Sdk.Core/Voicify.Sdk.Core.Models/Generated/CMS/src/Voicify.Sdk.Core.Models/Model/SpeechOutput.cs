/* 
 * Voicify CMS API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace Voicify.Sdk.Core.Models.Model
{
    /// <summary>
    /// SpeechOutput
    /// </summary>
    [DataContract]
    public partial class SpeechOutput :  IEquatable<SpeechOutput>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SpeechOutput" /> class.
        /// </summary>
        /// <param name="rootElementType">rootElementType.</param>
        /// <param name="url">url.</param>
        public SpeechOutput(string rootElementType = default(string), string url = default(string))
        {
            this.RootElementType = rootElementType;
            this.Url = url;
        }
        
        /// <summary>
        /// Gets or Sets RootElementType
        /// </summary>
        [DataMember(Name="rootElementType", EmitDefaultValue=false)]
        public string RootElementType { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SpeechOutput {\n");
            sb.Append("  RootElementType: ").Append(RootElementType).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SpeechOutput);
        }

        /// <summary>
        /// Returns true if SpeechOutput instances are equal
        /// </summary>
        /// <param name="input">Instance of SpeechOutput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SpeechOutput input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RootElementType == input.RootElementType ||
                    (this.RootElementType != null &&
                    this.RootElementType.Equals(input.RootElementType))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RootElementType != null)
                    hashCode = hashCode * 59 + this.RootElementType.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                return hashCode;
            }
        }

    }

}

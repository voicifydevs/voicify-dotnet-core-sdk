/* 
 * Voicify CMS API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace Voicify.Sdk.Core.Models.Model
{
    /// <summary>
    /// ConditionInstanceModel
    /// </summary>
    [DataContract]
        public partial class ConditionInstanceModel :  IEquatable<ConditionInstanceModel>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConditionInstanceModel" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="value">value.</param>
        /// <param name="andCondition">andCondition.</param>
        /// <param name="condition">condition.</param>
        /// <param name="conditionId">conditionId.</param>
        public ConditionInstanceModel(string id = default(string), string value = default(string), ConditionInstanceModel andCondition = default(ConditionInstanceModel), ConditionModel condition = default(ConditionModel), string conditionId = default(string))
        {
            this.Id = id;
            this.Value = value;
            this.AndCondition = andCondition;
            this.Condition = condition;
            this.ConditionId = conditionId;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public string Value { get; set; }

        /// <summary>
        /// Gets or Sets AndCondition
        /// </summary>
        [DataMember(Name="andCondition", EmitDefaultValue=false)]
        public ConditionInstanceModel AndCondition { get; set; }

        /// <summary>
        /// Gets or Sets Condition
        /// </summary>
        [DataMember(Name="condition", EmitDefaultValue=false)]
        public ConditionModel Condition { get; set; }

        /// <summary>
        /// Gets or Sets ConditionId
        /// </summary>
        [DataMember(Name="conditionId", EmitDefaultValue=false)]
        public string ConditionId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConditionInstanceModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  AndCondition: ").Append(AndCondition).Append("\n");
            sb.Append("  Condition: ").Append(Condition).Append("\n");
            sb.Append("  ConditionId: ").Append(ConditionId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConditionInstanceModel);
        }

        /// <summary>
        /// Returns true if ConditionInstanceModel instances are equal
        /// </summary>
        /// <param name="input">Instance of ConditionInstanceModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConditionInstanceModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.AndCondition == input.AndCondition ||
                    (this.AndCondition != null &&
                    this.AndCondition.Equals(input.AndCondition))
                ) && 
                (
                    this.Condition == input.Condition ||
                    (this.Condition != null &&
                    this.Condition.Equals(input.Condition))
                ) && 
                (
                    this.ConditionId == input.ConditionId ||
                    (this.ConditionId != null &&
                    this.ConditionId.Equals(input.ConditionId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.AndCondition != null)
                    hashCode = hashCode * 59 + this.AndCondition.GetHashCode();
                if (this.Condition != null)
                    hashCode = hashCode * 59 + this.Condition.GetHashCode();
                if (this.ConditionId != null)
                    hashCode = hashCode * 59 + this.ConditionId.GetHashCode();
                return hashCode;
            }
        }

    }
}

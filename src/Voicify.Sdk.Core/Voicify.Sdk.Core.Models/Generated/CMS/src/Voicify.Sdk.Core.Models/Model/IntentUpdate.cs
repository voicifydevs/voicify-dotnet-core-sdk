/* 
 * Voicify CMS API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace Voicify.Sdk.Core.Models.Model
{
    /// <summary>
    /// IntentUpdate
    /// </summary>
    [DataContract]
    public partial class IntentUpdate :  IEquatable<IntentUpdate>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IntentUpdate" /> class.
        /// </summary>
        /// <param name="addedUtterances">addedUtterances.</param>
        /// <param name="removedUtterances">removedUtterances.</param>
        public IntentUpdate(List<string> addedUtterances = default(List<string>), List<string> removedUtterances = default(List<string>))
        {
            this.AddedUtterances = addedUtterances;
            this.RemovedUtterances = removedUtterances;
        }
        
        /// <summary>
        /// Gets or Sets AddedUtterances
        /// </summary>
        [DataMember(Name="addedUtterances", EmitDefaultValue=false)]
        public List<string> AddedUtterances { get; set; }

        /// <summary>
        /// Gets or Sets RemovedUtterances
        /// </summary>
        [DataMember(Name="removedUtterances", EmitDefaultValue=false)]
        public List<string> RemovedUtterances { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IntentUpdate {\n");
            sb.Append("  AddedUtterances: ").Append(AddedUtterances).Append("\n");
            sb.Append("  RemovedUtterances: ").Append(RemovedUtterances).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IntentUpdate);
        }

        /// <summary>
        /// Returns true if IntentUpdate instances are equal
        /// </summary>
        /// <param name="input">Instance of IntentUpdate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IntentUpdate input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AddedUtterances == input.AddedUtterances ||
                    this.AddedUtterances != null &&
                    this.AddedUtterances.SequenceEqual(input.AddedUtterances)
                ) && 
                (
                    this.RemovedUtterances == input.RemovedUtterances ||
                    this.RemovedUtterances != null &&
                    this.RemovedUtterances.SequenceEqual(input.RemovedUtterances)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AddedUtterances != null)
                    hashCode = hashCode * 59 + this.AddedUtterances.GetHashCode();
                if (this.RemovedUtterances != null)
                    hashCode = hashCode * 59 + this.RemovedUtterances.GetHashCode();
                return hashCode;
            }
        }

    }

}

/* 
 * Voicify CMS API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace Voicify.Sdk.Core.Models.Model
{
    /// <summary>
    /// ConversationCountModel
    /// </summary>
    [DataContract]
        public partial class ConversationCountModel :  IEquatable<ConversationCountModel>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConversationCountModel" /> class.
        /// </summary>
        /// <param name="applicationFeatureId">applicationFeatureId.</param>
        /// <param name="conversationCount">conversationCount.</param>
        public ConversationCountModel(string applicationFeatureId = default(string), int? conversationCount = default(int?))
        {
            this.ApplicationFeatureId = applicationFeatureId;
            this.ConversationCount = conversationCount;
        }
        
        /// <summary>
        /// Gets or Sets ApplicationFeatureId
        /// </summary>
        [DataMember(Name="applicationFeatureId", EmitDefaultValue=false)]
        public string ApplicationFeatureId { get; set; }

        /// <summary>
        /// Gets or Sets ConversationCount
        /// </summary>
        [DataMember(Name="conversationCount", EmitDefaultValue=false)]
        public int? ConversationCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConversationCountModel {\n");
            sb.Append("  ApplicationFeatureId: ").Append(ApplicationFeatureId).Append("\n");
            sb.Append("  ConversationCount: ").Append(ConversationCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConversationCountModel);
        }

        /// <summary>
        /// Returns true if ConversationCountModel instances are equal
        /// </summary>
        /// <param name="input">Instance of ConversationCountModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConversationCountModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ApplicationFeatureId == input.ApplicationFeatureId ||
                    (this.ApplicationFeatureId != null &&
                    this.ApplicationFeatureId.Equals(input.ApplicationFeatureId))
                ) && 
                (
                    this.ConversationCount == input.ConversationCount ||
                    (this.ConversationCount != null &&
                    this.ConversationCount.Equals(input.ConversationCount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ApplicationFeatureId != null)
                    hashCode = hashCode * 59 + this.ApplicationFeatureId.GetHashCode();
                if (this.ConversationCount != null)
                    hashCode = hashCode * 59 + this.ConversationCount.GetHashCode();
                return hashCode;
            }
        }

    }
}

/* 
 * Voicify CMS API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace Voicify.Sdk.Core.Models.Model
{
    /// <summary>
    /// ProcessedLanguage
    /// </summary>
    [DataContract]
        public partial class ProcessedLanguage :  IEquatable<ProcessedLanguage>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessedLanguage" /> class.
        /// </summary>
        /// <param name="intent">intent.</param>
        /// <param name="intentDisplayName">intentDisplayName.</param>
        /// <param name="slots">slots.</param>
        /// <param name="utteranceMatched">utteranceMatched.</param>
        public ProcessedLanguage(string intent = default(string), string intentDisplayName = default(string), Dictionary<string, string> slots = default(Dictionary<string, string>), string utteranceMatched = default(string))
        {
            this.Intent = intent;
            this.IntentDisplayName = intentDisplayName;
            this.Slots = slots;
            this.UtteranceMatched = utteranceMatched;
        }
        
        /// <summary>
        /// Gets or Sets Intent
        /// </summary>
        [DataMember(Name="intent", EmitDefaultValue=false)]
        public string Intent { get; set; }

        /// <summary>
        /// Gets or Sets IntentDisplayName
        /// </summary>
        [DataMember(Name="intentDisplayName", EmitDefaultValue=false)]
        public string IntentDisplayName { get; set; }

        /// <summary>
        /// Gets or Sets Slots
        /// </summary>
        [DataMember(Name="slots", EmitDefaultValue=false)]
        public Dictionary<string, string> Slots { get; set; }

        /// <summary>
        /// Gets or Sets UtteranceMatched
        /// </summary>
        [DataMember(Name="utteranceMatched", EmitDefaultValue=false)]
        public string UtteranceMatched { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProcessedLanguage {\n");
            sb.Append("  Intent: ").Append(Intent).Append("\n");
            sb.Append("  IntentDisplayName: ").Append(IntentDisplayName).Append("\n");
            sb.Append("  Slots: ").Append(Slots).Append("\n");
            sb.Append("  UtteranceMatched: ").Append(UtteranceMatched).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProcessedLanguage);
        }

        /// <summary>
        /// Returns true if ProcessedLanguage instances are equal
        /// </summary>
        /// <param name="input">Instance of ProcessedLanguage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProcessedLanguage input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Intent == input.Intent ||
                    (this.Intent != null &&
                    this.Intent.Equals(input.Intent))
                ) && 
                (
                    this.IntentDisplayName == input.IntentDisplayName ||
                    (this.IntentDisplayName != null &&
                    this.IntentDisplayName.Equals(input.IntentDisplayName))
                ) && 
                (
                    this.Slots == input.Slots ||
                    this.Slots != null &&
                    input.Slots != null &&
                    this.Slots.SequenceEqual(input.Slots)
                ) && 
                (
                    this.UtteranceMatched == input.UtteranceMatched ||
                    (this.UtteranceMatched != null &&
                    this.UtteranceMatched.Equals(input.UtteranceMatched))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Intent != null)
                    hashCode = hashCode * 59 + this.Intent.GetHashCode();
                if (this.IntentDisplayName != null)
                    hashCode = hashCode * 59 + this.IntentDisplayName.GetHashCode();
                if (this.Slots != null)
                    hashCode = hashCode * 59 + this.Slots.GetHashCode();
                if (this.UtteranceMatched != null)
                    hashCode = hashCode * 59 + this.UtteranceMatched.GetHashCode();
                return hashCode;
            }
        }

    }
}

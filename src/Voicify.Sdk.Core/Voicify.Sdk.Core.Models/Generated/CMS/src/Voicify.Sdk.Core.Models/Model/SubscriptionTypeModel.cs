/* 
 * Voicify CMS API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace Voicify.Sdk.Core.Models.Model
{
    /// <summary>
    /// SubscriptionTypeModel
    /// </summary>
    [DataContract]
    public partial class SubscriptionTypeModel :  IEquatable<SubscriptionTypeModel>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionTypeModel" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="name">name.</param>
        /// <param name="description">description.</param>
        /// <param name="maxApps">maxApps.</param>
        /// <param name="maxMembers">maxMembers.</param>
        /// <param name="maxSandboxes">maxSandboxes.</param>
        /// <param name="maxRequests">maxRequests.</param>
        /// <param name="maxFileUploadMegabytes">maxFileUploadMegabytes.</param>
        /// <param name="length">length.</param>
        /// <param name="isCustom">isCustom.</param>
        public SubscriptionTypeModel(string id = default(string), string name = default(string), string description = default(string), long? maxApps = default(long?), long? maxMembers = default(long?), long? maxSandboxes = default(long?), long? maxRequests = default(long?), long? maxFileUploadMegabytes = default(long?), string length = default(string), bool? isCustom = default(bool?))
        {
            this.Id = id;
            this.Name = name;
            this.Description = description;
            this.MaxApps = maxApps;
            this.MaxMembers = maxMembers;
            this.MaxSandboxes = maxSandboxes;
            this.MaxRequests = maxRequests;
            this.MaxFileUploadMegabytes = maxFileUploadMegabytes;
            this.Length = length;
            this.IsCustom = isCustom;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets MaxApps
        /// </summary>
        [DataMember(Name="maxApps", EmitDefaultValue=false)]
        public long? MaxApps { get; set; }

        /// <summary>
        /// Gets or Sets MaxMembers
        /// </summary>
        [DataMember(Name="maxMembers", EmitDefaultValue=false)]
        public long? MaxMembers { get; set; }

        /// <summary>
        /// Gets or Sets MaxSandboxes
        /// </summary>
        [DataMember(Name="maxSandboxes", EmitDefaultValue=false)]
        public long? MaxSandboxes { get; set; }

        /// <summary>
        /// Gets or Sets MaxRequests
        /// </summary>
        [DataMember(Name="maxRequests", EmitDefaultValue=false)]
        public long? MaxRequests { get; set; }

        /// <summary>
        /// Gets or Sets MaxFileUploadMegabytes
        /// </summary>
        [DataMember(Name="maxFileUploadMegabytes", EmitDefaultValue=false)]
        public long? MaxFileUploadMegabytes { get; set; }

        /// <summary>
        /// Gets or Sets Length
        /// </summary>
        [DataMember(Name="length", EmitDefaultValue=false)]
        public string Length { get; set; }

        /// <summary>
        /// Gets or Sets IsCustom
        /// </summary>
        [DataMember(Name="isCustom", EmitDefaultValue=false)]
        public bool? IsCustom { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SubscriptionTypeModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  MaxApps: ").Append(MaxApps).Append("\n");
            sb.Append("  MaxMembers: ").Append(MaxMembers).Append("\n");
            sb.Append("  MaxSandboxes: ").Append(MaxSandboxes).Append("\n");
            sb.Append("  MaxRequests: ").Append(MaxRequests).Append("\n");
            sb.Append("  MaxFileUploadMegabytes: ").Append(MaxFileUploadMegabytes).Append("\n");
            sb.Append("  Length: ").Append(Length).Append("\n");
            sb.Append("  IsCustom: ").Append(IsCustom).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SubscriptionTypeModel);
        }

        /// <summary>
        /// Returns true if SubscriptionTypeModel instances are equal
        /// </summary>
        /// <param name="input">Instance of SubscriptionTypeModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubscriptionTypeModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.MaxApps == input.MaxApps ||
                    (this.MaxApps != null &&
                    this.MaxApps.Equals(input.MaxApps))
                ) && 
                (
                    this.MaxMembers == input.MaxMembers ||
                    (this.MaxMembers != null &&
                    this.MaxMembers.Equals(input.MaxMembers))
                ) && 
                (
                    this.MaxSandboxes == input.MaxSandboxes ||
                    (this.MaxSandboxes != null &&
                    this.MaxSandboxes.Equals(input.MaxSandboxes))
                ) && 
                (
                    this.MaxRequests == input.MaxRequests ||
                    (this.MaxRequests != null &&
                    this.MaxRequests.Equals(input.MaxRequests))
                ) && 
                (
                    this.MaxFileUploadMegabytes == input.MaxFileUploadMegabytes ||
                    (this.MaxFileUploadMegabytes != null &&
                    this.MaxFileUploadMegabytes.Equals(input.MaxFileUploadMegabytes))
                ) && 
                (
                    this.Length == input.Length ||
                    (this.Length != null &&
                    this.Length.Equals(input.Length))
                ) && 
                (
                    this.IsCustom == input.IsCustom ||
                    (this.IsCustom != null &&
                    this.IsCustom.Equals(input.IsCustom))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.MaxApps != null)
                    hashCode = hashCode * 59 + this.MaxApps.GetHashCode();
                if (this.MaxMembers != null)
                    hashCode = hashCode * 59 + this.MaxMembers.GetHashCode();
                if (this.MaxSandboxes != null)
                    hashCode = hashCode * 59 + this.MaxSandboxes.GetHashCode();
                if (this.MaxRequests != null)
                    hashCode = hashCode * 59 + this.MaxRequests.GetHashCode();
                if (this.MaxFileUploadMegabytes != null)
                    hashCode = hashCode * 59 + this.MaxFileUploadMegabytes.GetHashCode();
                if (this.Length != null)
                    hashCode = hashCode * 59 + this.Length.GetHashCode();
                if (this.IsCustom != null)
                    hashCode = hashCode * 59 + this.IsCustom.GetHashCode();
                return hashCode;
            }
        }

    }

}

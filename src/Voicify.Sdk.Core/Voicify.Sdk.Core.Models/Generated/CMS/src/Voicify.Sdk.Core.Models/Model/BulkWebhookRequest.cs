/* 
 * Voicify CMS API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace Voicify.Sdk.Core.Models.Model
{
    /// <summary>
    /// BulkWebhookRequest
    /// </summary>
    [DataContract]
        public partial class BulkWebhookRequest :  IEquatable<BulkWebhookRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BulkWebhookRequest" /> class.
        /// </summary>
        /// <param name="applicationId">applicationId (required).</param>
        /// <param name="webhookIds">webhookIds.</param>
        /// <param name="webhookFolderIds">webhookFolderIds.</param>
        public BulkWebhookRequest(string applicationId = default(string), List<string> webhookIds = default(List<string>), List<string> webhookFolderIds = default(List<string>))
        {
            // to ensure "applicationId" is required (not null)
            if (applicationId == null)
            {
                throw new InvalidDataException("applicationId is a required property for BulkWebhookRequest and cannot be null");
            }
            else
            {
                this.ApplicationId = applicationId;
            }
            this.WebhookIds = webhookIds;
            this.WebhookFolderIds = webhookFolderIds;
        }
        
        /// <summary>
        /// Gets or Sets ApplicationId
        /// </summary>
        [DataMember(Name="applicationId", EmitDefaultValue=false)]
        public string ApplicationId { get; set; }

        /// <summary>
        /// Gets or Sets WebhookIds
        /// </summary>
        [DataMember(Name="webhookIds", EmitDefaultValue=false)]
        public List<string> WebhookIds { get; set; }

        /// <summary>
        /// Gets or Sets WebhookFolderIds
        /// </summary>
        [DataMember(Name="webhookFolderIds", EmitDefaultValue=false)]
        public List<string> WebhookFolderIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BulkWebhookRequest {\n");
            sb.Append("  ApplicationId: ").Append(ApplicationId).Append("\n");
            sb.Append("  WebhookIds: ").Append(WebhookIds).Append("\n");
            sb.Append("  WebhookFolderIds: ").Append(WebhookFolderIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BulkWebhookRequest);
        }

        /// <summary>
        /// Returns true if BulkWebhookRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of BulkWebhookRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BulkWebhookRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ApplicationId == input.ApplicationId ||
                    (this.ApplicationId != null &&
                    this.ApplicationId.Equals(input.ApplicationId))
                ) && 
                (
                    this.WebhookIds == input.WebhookIds ||
                    this.WebhookIds != null &&
                    input.WebhookIds != null &&
                    this.WebhookIds.SequenceEqual(input.WebhookIds)
                ) && 
                (
                    this.WebhookFolderIds == input.WebhookFolderIds ||
                    this.WebhookFolderIds != null &&
                    input.WebhookFolderIds != null &&
                    this.WebhookFolderIds.SequenceEqual(input.WebhookFolderIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ApplicationId != null)
                    hashCode = hashCode * 59 + this.ApplicationId.GetHashCode();
                if (this.WebhookIds != null)
                    hashCode = hashCode * 59 + this.WebhookIds.GetHashCode();
                if (this.WebhookFolderIds != null)
                    hashCode = hashCode * 59 + this.WebhookFolderIds.GetHashCode();
                return hashCode;
            }
        }

    }
}

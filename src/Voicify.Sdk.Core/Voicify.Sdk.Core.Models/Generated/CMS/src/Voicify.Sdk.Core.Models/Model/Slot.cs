/* 
 * Voicify CMS API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace Voicify.Sdk.Core.Models.Model
{
    /// <summary>
    /// Slot
    /// </summary>
    [DataContract]
    public partial class Slot :  IEquatable<Slot>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Slot" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="required">required.</param>
        /// <param name="type">type.</param>
        public Slot(string name = default(string), bool? required = default(bool?), Dictionary<string, string> type = default(Dictionary<string, string>))
        {
            this.Name = name;
            this.Required = required;
            this.Type = type;
        }
        
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Required
        /// </summary>
        [DataMember(Name="required", EmitDefaultValue=false)]
        public bool? Required { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public Dictionary<string, string> Type { get; set; }

        /// <summary>
        /// Gets or Sets IsNonIsolatable
        /// </summary>
        [DataMember(Name="isNonIsolatable", EmitDefaultValue=false)]
        public bool? IsNonIsolatable { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Slot {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Required: ").Append(Required).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  IsNonIsolatable: ").Append(IsNonIsolatable).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Slot);
        }

        /// <summary>
        /// Returns true if Slot instances are equal
        /// </summary>
        /// <param name="input">Instance of Slot to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Slot input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Required == input.Required ||
                    (this.Required != null &&
                    this.Required.Equals(input.Required))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type != null &&
                    this.Type.SequenceEqual(input.Type)
                ) && 
                (
                    this.IsNonIsolatable == input.IsNonIsolatable ||
                    (this.IsNonIsolatable != null &&
                    this.IsNonIsolatable.Equals(input.IsNonIsolatable))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Required != null)
                    hashCode = hashCode * 59 + this.Required.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.IsNonIsolatable != null)
                    hashCode = hashCode * 59 + this.IsNonIsolatable.GetHashCode();
                return hashCode;
            }
        }

    }

}

/* 
 * Voicify CMS API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace Voicify.Sdk.Core.Models.Model
{
    /// <summary>
    /// WebhookTypeModel
    /// </summary>
    [DataContract]
    public partial class WebhookTypeModel :  IEquatable<WebhookTypeModel>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebhookTypeModel" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="typeName">typeName.</param>
        /// <param name="title">title.</param>
        /// <param name="description">description.</param>
        /// <param name="webhookScopes">webhookScopes.</param>
        public WebhookTypeModel(string id = default(string), string typeName = default(string), string title = default(string), string description = default(string), List<WebhookScopeModel> webhookScopes = default(List<WebhookScopeModel>))
        {
            this.Id = id;
            this.TypeName = typeName;
            this.Title = title;
            this.Description = description;
            this.WebhookScopes = webhookScopes;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets TypeName
        /// </summary>
        [DataMember(Name="typeName", EmitDefaultValue=false)]
        public string TypeName { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets WebhookScopes
        /// </summary>
        [DataMember(Name="webhookScopes", EmitDefaultValue=false)]
        public List<WebhookScopeModel> WebhookScopes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WebhookTypeModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  TypeName: ").Append(TypeName).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  WebhookScopes: ").Append(WebhookScopes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WebhookTypeModel);
        }

        /// <summary>
        /// Returns true if WebhookTypeModel instances are equal
        /// </summary>
        /// <param name="input">Instance of WebhookTypeModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WebhookTypeModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.TypeName == input.TypeName ||
                    (this.TypeName != null &&
                    this.TypeName.Equals(input.TypeName))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.WebhookScopes == input.WebhookScopes ||
                    this.WebhookScopes != null &&
                    this.WebhookScopes.SequenceEqual(input.WebhookScopes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.TypeName != null)
                    hashCode = hashCode * 59 + this.TypeName.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.WebhookScopes != null)
                    hashCode = hashCode * 59 + this.WebhookScopes.GetHashCode();
                return hashCode;
            }
        }

    }

}
